grammar willburden.hale.Hale with org.eclipse.xtext.common.Terminals

generate hale "http://www.hale.willburden/Hale"

/*************************************************************
 * Top-level
 ************************************************************/

Hale:
	{Hale} (statements+=Statement)*
;

Statement:
	(Expression | Print | Binding | Assignment) ';'
;

Print:
	'print' value=Expression
;

/*************************************************************
 * Bindings
 ************************************************************/

Binding:
	'let' (mutable?='mut')? name=ID '=' value=Expression
;

BindingReference:
	binding=[Binding]
;

Assignment:
	binding=[Binding] '=' value=Expression
;

/*************************************************************
 * Expressions
 ************************************************************/

// Start with expressions of lowest precedence.
Expression returns Expression:
	Expression7
;

Expression7 returns Expression:
	Expression6 (
		({LogicalAnd.left=current} 'and' right=Expression6) |
		({LogicalOr.left=current} 'or' right=Expression6)
	)*
;

Expression6 returns Expression:
	Expression5 (
		({Equality.left=current} '==' right=Expression5) |
		({Inequality.left=current} '!=' right=Expression5)
	)*
;

Expression5 returns Expression:
	Expression4 (
		({LessThanOrEqual.left=current} '<=' right=Expression4) |
		({LessThan.left=current} '<' right=Expression4) |
		({GreaterThanOrEqual.left=current} '>=' right=Expression4) |
		({GreaterThan.left=current} '>' right=Expression4)
	)*
;

Expression4 returns Expression:
	Expression3 (
		({Addition.left=current} '+' right=Expression3) |
		({Subtraction.left=current} '-' right=Expression3)
	)*
;

Expression3 returns Expression:
	Expression2 (
		({Multiplication.left=current} '*' right=Expression2) |
		({Division.left=current} '/' right=Expression2) |
		({Remainder.left=current} '%' right=Expression2)		
	)*
;

Expression2 returns Expression:
	Expression1 ({Exponentiation.left=current} '**' right=Expression1)*
;

Expression1 returns Expression:
	({UnaryNegation} '-' inner=Expression1) |
	({LogicalNot} 'not' inner=Expression1) |
	Primary
;

Primary returns Expression:
	Literal |
	BindingReference |
	'(' Expression ')'
;

/*************************************************************
 * Literals
 ************************************************************/

Literal:
	NumberLiteral |
	StringLiteral
;

NumberLiteral:
	value=INT
;

StringLiteral:
	value=STRING
;
