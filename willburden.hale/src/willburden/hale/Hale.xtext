grammar willburden.hale.Hale hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate hale "http://www.hale.willburden/Hale"

/*************************************************************
 * Top-level
 ************************************************************/

Hale:
	{Hale} block=Block
;

Block:
	{Block}
	(statements+=Statement | ';')*
;

Statement:
	BracedBlock |
	If |
	While |
	((
		Print |
		Binding |
		Assignment |
		Expression
	) ';')
;

BracedBlock returns Block:
	'{' Block '}'
;

/*************************************************************
 * Expressions
 ************************************************************/

// Start with expressions of lowest precedence.
Expression returns Expression:
	Expression7
;

Expression7 returns Expression:
	Expression6 (
		({LogicalAnd.left=current} 'and' right=Expression6) |
		({LogicalOr.left=current} 'or' right=Expression6)
	)*
;

Expression6 returns Expression:
	Expression5 (
		({Equality.left=current} '==' right=Expression5) |
		({Inequality.left=current} '!=' right=Expression5)
	)*
;

Expression5 returns Expression:
	Expression4 (
		({LessThanOrEqual.left=current} '<=' right=Expression4) |
		({LessThan.left=current} '<' right=Expression4) |
		({GreaterThanOrEqual.left=current} '>=' right=Expression4) |
		({GreaterThan.left=current} '>' right=Expression4)
	)*
;

Expression4 returns Expression:
	Expression3 (
		({Addition.left=current} '+' right=Expression3) |
		({Subtraction.left=current} '-' right=Expression3)
	)*
;

Expression3 returns Expression:
	Expression2 (
		({Multiplication.left=current} '*' right=Expression2) |
		({Division.left=current} '/' right=Expression2) |
		({Remainder.left=current} '%' right=Expression2)		
	)*
;

Expression2 returns Expression:
	Expression1 ({Exponentiation.left=current} '**' right=Expression1)*
;

Expression1 returns Expression:
	({UnaryNegation} '-' inner=Expression1) |
	({LogicalNot} 'not' inner=Expression1) |
	Primary
;

Primary returns Expression:
	Literal |
	BindingReference |
	'(' Expression ')'
;

/*************************************************************
 * Literals
 ************************************************************/

Literal:
	NumberLiteral |
	StringLiteral
;

NumberLiteral:
	value=DOUBLE
;

StringLiteral:
	value=STRING
;

/*************************************************************
 * Bindings
 ************************************************************/

Binding:
	'let' (mutable?='mut')? name=ID '=' expression=Expression
;

BindingReference:
	binding=[Binding]
;

Assignment:
	binding=[Binding] '=' expression=Expression
;

/*************************************************************
 * Input/Output
 ************************************************************/

Print:
	'print' expression=Expression
;

/*************************************************************
 * Control flow
 ************************************************************/

If:
	'if' conditions+=Expression ifBlocks+=BracedBlock
	('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
	('else' elseBlock=BracedBlock)?
;

While:
	'while' condition=Expression block=BracedBlock
;

/*************************************************************
 * Terminals
 ************************************************************/

terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal DOUBLE returns ecore::EDouble: ('0'..'9')+ ('.' ('0'..'9')+)?;
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;
