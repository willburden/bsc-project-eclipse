/*
 * generated by Xtext 2.34.0
 */
package willburden.hale.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HaleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class HaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Hale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMainBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainBlockBlockParserRuleCall_1_0 = (RuleCall)cMainBlockAssignment_1.eContents().get(0);
		
		///*************************************************************
		// * Top-level
		// ************************************************************/
		//Hale:
		//    {Hale}
		//    mainBlock=Block
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Hale}
		//mainBlock=Block
		public Group getGroup() { return cGroup; }
		
		//{Hale}
		public Action getHaleAction_0() { return cHaleAction_0; }
		
		//mainBlock=Block
		public Assignment getMainBlockAssignment_1() { return cMainBlockAssignment_1; }
		
		//Block
		public RuleCall getMainBlockBlockParserRuleCall_1_0() { return cMainBlockBlockParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_1_0_0 = (RuleCall)cStatementsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Block:
		//    {Block}
		//    (statements+=Statement | ';')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}
		//(statements+=Statement | ';')*
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//(statements+=Statement | ';')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1_0() { return cStatementsAssignment_1_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0_0() { return cStatementsStatementParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracedBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final RuleCall cPrintParserRuleCall_4_0_0 = (RuleCall)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cLetBindingParserRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_4_0_2 = (RuleCall)cAlternatives_4_0.eContents().get(2);
		private final RuleCall cBreakParserRuleCall_4_0_3 = (RuleCall)cAlternatives_4_0.eContents().get(3);
		private final RuleCall cReturnParserRuleCall_4_0_4 = (RuleCall)cAlternatives_4_0.eContents().get(4);
		private final RuleCall cThrowParserRuleCall_4_0_5 = (RuleCall)cAlternatives_4_0.eContents().get(5);
		private final RuleCall cExpressionParserRuleCall_4_0_6 = (RuleCall)cAlternatives_4_0.eContents().get(6);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Statement:
		//    BracedBlock |
		//    Function |
		//    If |
		//    While |
		//    ((
		//        Print |
		//        LetBinding |
		//        Assignment |
		//        Break |
		//        Return |
		//        Throw |
		//        Expression
		//    ) ';')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BracedBlock |
		//Function |
		//If |
		//While |
		//((
		//    Print |
		//    LetBinding |
		//    Assignment |
		//    Break |
		//    Return |
		//    Throw |
		//    Expression
		//) ';')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BracedBlock
		public RuleCall getBracedBlockParserRuleCall_0() { return cBracedBlockParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
		
		//If
		public RuleCall getIfParserRuleCall_2() { return cIfParserRuleCall_2; }
		
		//While
		public RuleCall getWhileParserRuleCall_3() { return cWhileParserRuleCall_3; }
		
		//((
		//    Print |
		//    LetBinding |
		//    Assignment |
		//    Break |
		//    Return |
		//    Throw |
		//    Expression
		//) ';')
		public Group getGroup_4() { return cGroup_4; }
		
		//(
		//        Print |
		//        LetBinding |
		//        Assignment |
		//        Break |
		//        Return |
		//        Throw |
		//        Expression
		//    )
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//Print
		public RuleCall getPrintParserRuleCall_4_0_0() { return cPrintParserRuleCall_4_0_0; }
		
		//LetBinding
		public RuleCall getLetBindingParserRuleCall_4_0_1() { return cLetBindingParserRuleCall_4_0_1; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_4_0_2() { return cAssignmentParserRuleCall_4_0_2; }
		
		//Break
		public RuleCall getBreakParserRuleCall_4_0_3() { return cBreakParserRuleCall_4_0_3; }
		
		//Return
		public RuleCall getReturnParserRuleCall_4_0_4() { return cReturnParserRuleCall_4_0_4; }
		
		//Throw
		public RuleCall getThrowParserRuleCall_4_0_5() { return cThrowParserRuleCall_4_0_5; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_4_0_6() { return cExpressionParserRuleCall_4_0_6; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class BracedBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BracedBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracedBlock returns Block:
		//    '{' Block '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' Block '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression");
		private final RuleCall cExpression10ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*************************************************************
		// * Expressions
		// ************************************************************/
		//// Start with expressions of lowest precedence, since we
		//// are generating a syntax tree.
		//Expression returns Expression:
		//    Expression10
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression10
		public RuleCall getExpression10ParserRuleCall() { return cExpression10ParserRuleCall; }
	}
	public class Expression10Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression10");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression9ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConcatenationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression9ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression10 returns Expression:
		//    Expression9 ({Concatenation.left=current} '.' right=Expression9)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression9 ({Concatenation.left=current} '.' right=Expression9)*
		public Group getGroup() { return cGroup; }
		
		//Expression9
		public RuleCall getExpression9ParserRuleCall_0() { return cExpression9ParserRuleCall_0; }
		
		//({Concatenation.left=current} '.' right=Expression9)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Concatenation.left=current}
		public Action getConcatenationLeftAction_1_0() { return cConcatenationLeftAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//right=Expression9
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression9
		public RuleCall getRightExpression9ParserRuleCall_1_2_0() { return cRightExpression9ParserRuleCall_1_2_0; }
	}
	public class Expression9Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression9");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression8ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cLogicalAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression8ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLogicalOrLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression8ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Expression9 returns Expression:
		//    Expression8 (
		//        ({LogicalAnd.left=current} 'and' right=Expression8) |
		//        ({LogicalOr.left=current} 'or' right=Expression8)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression8 (
		//    ({LogicalAnd.left=current} 'and' right=Expression8) |
		//    ({LogicalOr.left=current} 'or' right=Expression8)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression8
		public RuleCall getExpression8ParserRuleCall_0() { return cExpression8ParserRuleCall_0; }
		
		//(
		//       ({LogicalAnd.left=current} 'and' right=Expression8) |
		//       ({LogicalOr.left=current} 'or' right=Expression8)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({LogicalAnd.left=current} 'and' right=Expression8)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LogicalAnd.left=current}
		public Action getLogicalAndLeftAction_1_0_0() { return cLogicalAndLeftAction_1_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_1() { return cAndKeyword_1_0_1; }
		
		//right=Expression8
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression8
		public RuleCall getRightExpression8ParserRuleCall_1_0_2_0() { return cRightExpression8ParserRuleCall_1_0_2_0; }
		
		//({LogicalOr.left=current} 'or' right=Expression8)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LogicalOr.left=current}
		public Action getLogicalOrLeftAction_1_1_0() { return cLogicalOrLeftAction_1_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1_1() { return cOrKeyword_1_1_1; }
		
		//right=Expression8
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression8
		public RuleCall getRightExpression8ParserRuleCall_1_1_2_0() { return cRightExpression8ParserRuleCall_1_1_2_0; }
	}
	public class Expression8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression8");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression7ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEqualityLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression7ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInequalityLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression7ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Expression8 returns Expression:
		//    Expression7 (
		//        ({Equality.left=current} '==' right=Expression7) |
		//        ({Inequality.left=current} '!=' right=Expression7)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression7 (
		//    ({Equality.left=current} '==' right=Expression7) |
		//    ({Inequality.left=current} '!=' right=Expression7)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression7
		public RuleCall getExpression7ParserRuleCall_0() { return cExpression7ParserRuleCall_0; }
		
		//(
		//       ({Equality.left=current} '==' right=Expression7) |
		//       ({Inequality.left=current} '!=' right=Expression7)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Equality.left=current} '==' right=Expression7)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0_0() { return cEqualityLeftAction_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }
		
		//right=Expression7
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression7
		public RuleCall getRightExpression7ParserRuleCall_1_0_2_0() { return cRightExpression7ParserRuleCall_1_0_2_0; }
		
		//({Inequality.left=current} '!=' right=Expression7)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Inequality.left=current}
		public Action getInequalityLeftAction_1_1_0() { return cInequalityLeftAction_1_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }
		
		//right=Expression7
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression7
		public RuleCall getRightExpression7ParserRuleCall_1_1_2_0() { return cRightExpression7ParserRuleCall_1_1_2_0; }
	}
	public class Expression7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression7");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cLessThanOrEqualLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression6ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLessThanLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression6ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cGreaterThanOrEqualLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpression6ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cGreaterThanLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpression6ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//Expression7 returns Expression:
		//    Expression6 (
		//        ({LessThanOrEqual.left=current} '<=' right=Expression6) |
		//        ({LessThan.left=current} '<' right=Expression6) |
		//        ({GreaterThanOrEqual.left=current} '>=' right=Expression6) |
		//        ({GreaterThan.left=current} '>' right=Expression6)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression6 (
		//    ({LessThanOrEqual.left=current} '<=' right=Expression6) |
		//    ({LessThan.left=current} '<' right=Expression6) |
		//    ({GreaterThanOrEqual.left=current} '>=' right=Expression6) |
		//    ({GreaterThan.left=current} '>' right=Expression6)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression6
		public RuleCall getExpression6ParserRuleCall_0() { return cExpression6ParserRuleCall_0; }
		
		//(
		//       ({LessThanOrEqual.left=current} '<=' right=Expression6) |
		//       ({LessThan.left=current} '<' right=Expression6) |
		//       ({GreaterThanOrEqual.left=current} '>=' right=Expression6) |
		//       ({GreaterThan.left=current} '>' right=Expression6)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({LessThanOrEqual.left=current} '<=' right=Expression6)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LessThanOrEqual.left=current}
		public Action getLessThanOrEqualLeftAction_1_0_0() { return cLessThanOrEqualLeftAction_1_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1() { return cLessThanSignEqualsSignKeyword_1_0_1; }
		
		//right=Expression6
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression6
		public RuleCall getRightExpression6ParserRuleCall_1_0_2_0() { return cRightExpression6ParserRuleCall_1_0_2_0; }
		
		//({LessThan.left=current} '<' right=Expression6)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LessThan.left=current}
		public Action getLessThanLeftAction_1_1_0() { return cLessThanLeftAction_1_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_1() { return cLessThanSignKeyword_1_1_1; }
		
		//right=Expression6
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression6
		public RuleCall getRightExpression6ParserRuleCall_1_1_2_0() { return cRightExpression6ParserRuleCall_1_1_2_0; }
		
		//({GreaterThanOrEqual.left=current} '>=' right=Expression6)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{GreaterThanOrEqual.left=current}
		public Action getGreaterThanOrEqualLeftAction_1_2_0() { return cGreaterThanOrEqualLeftAction_1_2_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_2_1() { return cGreaterThanSignEqualsSignKeyword_1_2_1; }
		
		//right=Expression6
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Expression6
		public RuleCall getRightExpression6ParserRuleCall_1_2_2_0() { return cRightExpression6ParserRuleCall_1_2_2_0; }
		
		//({GreaterThan.left=current} '>' right=Expression6)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{GreaterThan.left=current}
		public Action getGreaterThanLeftAction_1_3_0() { return cGreaterThanLeftAction_1_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3_1() { return cGreaterThanSignKeyword_1_3_1; }
		
		//right=Expression6
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//Expression6
		public RuleCall getRightExpression6ParserRuleCall_1_3_2_0() { return cRightExpression6ParserRuleCall_1_3_2_0; }
	}
	public class Expression6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression5ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression5ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Expression6 returns Expression:
		//    Expression5 (
		//        ({Addition.left=current} '+' right=Expression5) |
		//        ({Subtraction.left=current} '-' right=Expression5)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression5 (
		//    ({Addition.left=current} '+' right=Expression5) |
		//    ({Subtraction.left=current} '-' right=Expression5)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression5
		public RuleCall getExpression5ParserRuleCall_0() { return cExpression5ParserRuleCall_0; }
		
		//(
		//       ({Addition.left=current} '+' right=Expression5) |
		//       ({Subtraction.left=current} '-' right=Expression5)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Addition.left=current} '+' right=Expression5)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_0() { return cAdditionLeftAction_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=Expression5
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression5
		public RuleCall getRightExpression5ParserRuleCall_1_0_2_0() { return cRightExpression5ParserRuleCall_1_0_2_0; }
		
		//({Subtraction.left=current} '-' right=Expression5)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_1_0() { return cSubtractionLeftAction_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=Expression5
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression5
		public RuleCall getRightExpression5ParserRuleCall_1_1_2_0() { return cRightExpression5ParserRuleCall_1_1_2_0; }
	}
	public class Expression5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cRemainderLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//Expression5 returns Expression:
		//    Expression4 (
		//        ({Multiplication.left=current} '*' right=Expression4) |
		//        ({Division.left=current} '/' right=Expression4) |
		//        ({Remainder.left=current} '%' right=Expression4)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression4 (
		//    ({Multiplication.left=current} '*' right=Expression4) |
		//    ({Division.left=current} '/' right=Expression4) |
		//    ({Remainder.left=current} '%' right=Expression4)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression4
		public RuleCall getExpression4ParserRuleCall_0() { return cExpression4ParserRuleCall_0; }
		
		//(
		//       ({Multiplication.left=current} '*' right=Expression4) |
		//       ({Division.left=current} '/' right=Expression4) |
		//       ({Remainder.left=current} '%' right=Expression4)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Multiplication.left=current} '*' right=Expression4)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0() { return cMultiplicationLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_0_2_0() { return cRightExpression4ParserRuleCall_1_0_2_0; }
		
		//({Division.left=current} '/' right=Expression4)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_1_0() { return cDivisionLeftAction_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_1_2_0() { return cRightExpression4ParserRuleCall_1_1_2_0; }
		
		//({Remainder.left=current} '%' right=Expression4)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{Remainder.left=current}
		public Action getRemainderLeftAction_1_2_0() { return cRemainderLeftAction_1_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_2_1() { return cPercentSignKeyword_1_2_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_2_2_0() { return cRightExpression4ParserRuleCall_1_2_2_0; }
	}
	public class Expression4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentiationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression4 returns Expression:
		//    Expression3 ({Exponentiation.left=current} '**' right=Expression3)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression3 ({Exponentiation.left=current} '**' right=Expression3)*
		public Group getGroup() { return cGroup; }
		
		//Expression3
		public RuleCall getExpression3ParserRuleCall_0() { return cExpression3ParserRuleCall_0; }
		
		//({Exponentiation.left=current} '**' right=Expression3)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exponentiation.left=current}
		public Action getExponentiationLeftAction_1_0() { return cExponentiationLeftAction_1_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }
		
		//right=Expression3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression3
		public RuleCall getRightExpression3ParserRuleCall_1_2_0() { return cRightExpression3ParserRuleCall_1_2_0; }
	}
	public class Expression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConversionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression3 returns Expression:
		//    Expression2 ({Conversion.left=current} 'as' right=Type)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression2 ({Conversion.left=current} 'as' right=Type)*
		public Group getGroup() { return cGroup; }
		
		//Expression2
		public RuleCall getExpression2ParserRuleCall_0() { return cExpression2ParserRuleCall_0; }
		
		//({Conversion.left=current} 'as' right=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Conversion.left=current}
		public Action getConversionLeftAction_1_0() { return cConversionLeftAction_1_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		//right=Type
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Type
		public RuleCall getRightTypeParserRuleCall_1_2_0() { return cRightTypeParserRuleCall_1_2_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerExpression2ParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInnerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInnerExpression2ParserRuleCall_1_2_0 = (RuleCall)cInnerAssignment_1_2.eContents().get(0);
		private final RuleCall cExpression1ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression2 returns Expression:
		//    ({UnaryNegation} '-' inner=Expression2) |
		//    ({LogicalNot} 'not' inner=Expression2) |
		//    Expression1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//({UnaryNegation} '-' inner=Expression2) |
		//({LogicalNot} 'not' inner=Expression2) |
		//Expression1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({UnaryNegation} '-' inner=Expression2)
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryNegation}
		public Action getUnaryNegationAction_0_0() { return cUnaryNegationAction_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//inner=Expression2
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Expression2
		public RuleCall getInnerExpression2ParserRuleCall_0_2_0() { return cInnerExpression2ParserRuleCall_0_2_0; }
		
		//({LogicalNot} 'not' inner=Expression2)
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalNot}
		public Action getLogicalNotAction_1_0() { return cLogicalNotAction_1_0; }
		
		//'not'
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
		
		//inner=Expression2
		public Assignment getInnerAssignment_1_2() { return cInnerAssignment_1_2; }
		
		//Expression2
		public RuleCall getInnerExpression2ParserRuleCall_1_2_0() { return cInnerExpression2ParserRuleCall_1_2_0; }
		
		//Expression1
		public RuleCall getExpression1ParserRuleCall_2() { return cExpression1ParserRuleCall_2; }
	}
	public class Expression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cApplicationExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_0_0 = (RuleCall)cArgumentsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_1_1_0 = (RuleCall)cArgumentsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Expression1 returns Expression:
		//    Expression0 ({Application.expression=current} '('
		//        (arguments+=Expression (',' arguments+=Expression)* ','?)?
		//    ')')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression0 ({Application.expression=current} '('
		//    (arguments+=Expression (',' arguments+=Expression)* ','?)?
		//')')*
		public Group getGroup() { return cGroup; }
		
		//Expression0
		public RuleCall getExpression0ParserRuleCall_0() { return cExpression0ParserRuleCall_0; }
		
		//({Application.expression=current} '('
		//       (arguments+=Expression (',' arguments+=Expression)* ','?)?
		//   ')')*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Application.expression=current}
		public Action getApplicationExpressionAction_1_0() { return cApplicationExpressionAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(arguments+=Expression (',' arguments+=Expression)* ','?)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_0() { return cArgumentsAssignment_1_2_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_0_0() { return cArgumentsExpressionParserRuleCall_1_2_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_1_1() { return cArgumentsAssignment_1_2_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_1_1_0() { return cArgumentsExpressionParserRuleCall_1_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2_2() { return cCommaKeyword_1_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class Expression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBindingReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Expression0 returns Expression:
		//    Literal |
		//    Input |
		//    BindingReference |
		//    '(' Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal |
		//Input |
		//BindingReference |
		//'(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//BindingReference
		public RuleCall getBindingReferenceParserRuleCall_2() { return cBindingReferenceParserRuleCall_2; }
		
		//'(' Expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*************************************************************
		// * Literals
		// ************************************************************/
		//Literal:
		//    VoidLiteral |
		//    BooleanLiteral |
		//    NumberLiteral |
		//    StringLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VoidLiteral |
		//BooleanLiteral |
		//NumberLiteral |
		//StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VoidLiteral
		public RuleCall getVoidLiteralParserRuleCall_0() { return cVoidLiteralParserRuleCall_0; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
	}
	public class VoidLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.VoidLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidLiteral:
		//    {VoidLiteral} 'void'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VoidLiteral} 'void'
		public Group getGroup() { return cGroup; }
		
		//{VoidLiteral}
		public Action getVoidLiteralAction_0() { return cVoidLiteralAction_0; }
		
		//'void'
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//    value=BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//    value=DOUBLE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TypeAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.TypeAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///*************************************************************
		// * Types
		// ************************************************************/
		//TypeAnnotation returns Type:
		//    ':' Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//':' Type
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Type");
		private final RuleCall cFunctionTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type returns Type:
		//    FunctionType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionType
		public RuleCall getFunctionTypeParserRuleCall() { return cFunctionTypeParserRuleCall; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.FunctionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFunctionKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cParamTypesAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cParamTypesTypeParserRuleCall_0_3_0_0 = (RuleCall)cParamTypesAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cParamTypesAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cParamTypesTypeParserRuleCall_0_3_1_1_0 = (RuleCall)cParamTypesAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cReturnTypeAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cReturnTypeTypeAnnotationParserRuleCall_0_5_0 = (RuleCall)cReturnTypeAssignment_0_5.eContents().get(0);
		private final RuleCall cEitherTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionType returns Type:
		//    (
		//        {FunctionType}
		//        'Function' '('
		//            (paramTypes+=Type (',' paramTypes+=Type)* ','?)?
		//        ')'
		//        (returnType=TypeAnnotation)?
		//    ) |
		//    EitherType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    {FunctionType}
		//    'Function' '('
		//        (paramTypes+=Type (',' paramTypes+=Type)* ','?)?
		//    ')'
		//    (returnType=TypeAnnotation)?
		//) |
		//EitherType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(
		//    {FunctionType}
		//    'Function' '('
		//        (paramTypes+=Type (',' paramTypes+=Type)* ','?)?
		//    ')'
		//    (returnType=TypeAnnotation)?
		//)
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunctionType}
		public Action getFunctionTypeAction_0_0() { return cFunctionTypeAction_0_0; }
		
		//'Function'
		public Keyword getFunctionKeyword_0_1() { return cFunctionKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//(paramTypes+=Type (',' paramTypes+=Type)* ','?)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//paramTypes+=Type
		public Assignment getParamTypesAssignment_0_3_0() { return cParamTypesAssignment_0_3_0; }
		
		//Type
		public RuleCall getParamTypesTypeParserRuleCall_0_3_0_0() { return cParamTypesTypeParserRuleCall_0_3_0_0; }
		
		//(',' paramTypes+=Type)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//','
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }
		
		//paramTypes+=Type
		public Assignment getParamTypesAssignment_0_3_1_1() { return cParamTypesAssignment_0_3_1_1; }
		
		//Type
		public RuleCall getParamTypesTypeParserRuleCall_0_3_1_1_0() { return cParamTypesTypeParserRuleCall_0_3_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_0_3_2() { return cCommaKeyword_0_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//(returnType=TypeAnnotation)?
		public Assignment getReturnTypeAssignment_0_5() { return cReturnTypeAssignment_0_5; }
		
		//TypeAnnotation
		public RuleCall getReturnTypeTypeAnnotationParserRuleCall_0_5_0() { return cReturnTypeTypeAnnotationParserRuleCall_0_5_0; }
		
		//EitherType
		public RuleCall getEitherTypeParserRuleCall_1() { return cEitherTypeParserRuleCall_1; }
	}
	public class EitherTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.EitherType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEitherTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EitherType returns Type:
		//    PrimaryType ({EitherType.left=current} '?' right=PrimaryType)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryType ({EitherType.left=current} '?' right=PrimaryType)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryType
		public RuleCall getPrimaryTypeParserRuleCall_0() { return cPrimaryTypeParserRuleCall_0; }
		
		//({EitherType.left=current} '?' right=PrimaryType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EitherType.left=current}
		public Action getEitherTypeLeftAction_1_0() { return cEitherTypeLeftAction_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//right=PrimaryType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryType
		public RuleCall getRightPrimaryTypeParserRuleCall_1_2_0() { return cRightPrimaryTypeParserRuleCall_1_2_0; }
	}
	public class PrimaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.PrimaryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryType returns Type:
		//    PrimitiveType |
		//    '(' Type ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType |
		//'(' Type ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//'(' Type ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.PrimitiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePRIMITIVE_TYPETerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PrimitiveType returns Type:
		//    {PrimitiveType}
		//    type=PRIMITIVE_TYPE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveType}
		//type=PRIMITIVE_TYPE
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveType}
		public Action getPrimitiveTypeAction_0() { return cPrimitiveTypeAction_0; }
		
		//type=PRIMITIVE_TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//PRIMITIVE_TYPE
		public RuleCall getTypePRIMITIVE_TYPETerminalRuleCall_1_0() { return cTypePRIMITIVE_TYPETerminalRuleCall_1_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Binding");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///*************************************************************
		// * Bindings
		// ************************************************************/
		//Binding:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LetBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.LetBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		private final Assignment cBindingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingBindingParserRuleCall_2_0 = (RuleCall)cBindingAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeAnnotationParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//LetBinding:
		//    'let' (mutable?='mut')? binding=Binding
		//    (type=TypeAnnotation)? '=' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' (mutable?='mut')? binding=Binding
		//(type=TypeAnnotation)? '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//(mutable?='mut')?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }
		
		//'mut'
		public Keyword getMutableMutKeyword_1_0() { return cMutableMutKeyword_1_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_2() { return cBindingAssignment_2; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_2_0() { return cBindingBindingParserRuleCall_2_0; }
		
		//(type=TypeAnnotation)?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeAnnotation
		public RuleCall getTypeTypeAnnotationParserRuleCall_3_0() { return cTypeTypeAnnotationParserRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
	}
	public class BindingReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BindingReference");
		private final Assignment cBindingAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cBindingBindingCrossReference_0 = (CrossReference)cBindingAssignment.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_0_1 = (RuleCall)cBindingBindingCrossReference_0.eContents().get(1);
		
		//BindingReference:
		//    binding=[Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=[Binding]
		public Assignment getBindingAssignment() { return cBindingAssignment; }
		
		//[Binding]
		public CrossReference getBindingBindingCrossReference_0() { return cBindingBindingCrossReference_0; }
		
		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_0_1() { return cBindingBindingIDTerminalRuleCall_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBindingBindingCrossReference_0_0 = (CrossReference)cBindingAssignment_0.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_0_0_1 = (RuleCall)cBindingBindingCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//    binding=[Binding] '=' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=[Binding] '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//binding=[Binding]
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//[Binding]
		public CrossReference getBindingBindingCrossReference_0_0() { return cBindingBindingCrossReference_0_0; }
		
		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_0_0_1() { return cBindingBindingIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///*************************************************************
		// * Input/Output
		// ************************************************************/
		//Input:
		//    {Input} 'input'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} 'input'
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//'input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Print:
		//    'print' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIfLetParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIfConditionsParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		///*************************************************************
		// * Control flow
		// ************************************************************/
		//If:
		//    'if' (IfLet | IfConditions)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' (IfLet | IfConditions)
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(IfLet | IfConditions)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//IfLet
		public RuleCall getIfLetParserRuleCall_1_0() { return cIfLetParserRuleCall_1_0; }
		
		//IfConditions
		public RuleCall getIfConditionsParserRuleCall_1_1() { return cIfConditionsParserRuleCall_1_1; }
	}
	public class IfLetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.IfLet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		private final Assignment cBindingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingBindingParserRuleCall_2_0 = (RuleCall)cBindingAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeAnnotationParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Assignment cIfBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIfBlockBracedBlockParserRuleCall_6_0 = (RuleCall)cIfBlockAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cElseLetAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cElseLetElseLetParserRuleCall_7_1_0 = (RuleCall)cElseLetAssignment_7_1.eContents().get(0);
		
		//IfLet:
		//    'let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?
		//    '=' expression=Expression
		//        ifBlock=BracedBlock
		//    ('else' elseLet=ElseLet)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?
		//'=' expression=Expression
		//    ifBlock=BracedBlock
		//('else' elseLet=ElseLet)?
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//(mutable?='mut')?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }
		
		//'mut'
		public Keyword getMutableMutKeyword_1_0() { return cMutableMutKeyword_1_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_2() { return cBindingAssignment_2; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_2_0() { return cBindingBindingParserRuleCall_2_0; }
		
		//(type=TypeAnnotation)?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeAnnotation
		public RuleCall getTypeTypeAnnotationParserRuleCall_3_0() { return cTypeTypeAnnotationParserRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
		
		//ifBlock=BracedBlock
		public Assignment getIfBlockAssignment_6() { return cIfBlockAssignment_6; }
		
		//BracedBlock
		public RuleCall getIfBlockBracedBlockParserRuleCall_6_0() { return cIfBlockBracedBlockParserRuleCall_6_0; }
		
		//('else' elseLet=ElseLet)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//elseLet=ElseLet
		public Assignment getElseLetAssignment_7_1() { return cElseLetAssignment_7_1; }
		
		//ElseLet
		public RuleCall getElseLetElseLetParserRuleCall_7_1_0() { return cElseLetElseLetParserRuleCall_7_1_0; }
	}
	public class ElseLetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.ElseLet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMutableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cMutableMutKeyword_0_1_0 = (Keyword)cMutableAssignment_0_1.eContents().get(0);
		private final Assignment cBindingAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBindingBindingParserRuleCall_0_2_0 = (RuleCall)cBindingAssignment_0_2.eContents().get(0);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeTypeAnnotationParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Assignment cElseBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElseBlockBracedBlockParserRuleCall_1_0 = (RuleCall)cElseBlockAssignment_1.eContents().get(0);
		
		//ElseLet:
		//    ('let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?)?
		//        elseBlock=BracedBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?)?
		//    elseBlock=BracedBlock
		public Group getGroup() { return cGroup; }
		
		//('let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'let'
		public Keyword getLetKeyword_0_0() { return cLetKeyword_0_0; }
		
		//(mutable?='mut')?
		public Assignment getMutableAssignment_0_1() { return cMutableAssignment_0_1; }
		
		//'mut'
		public Keyword getMutableMutKeyword_0_1_0() { return cMutableMutKeyword_0_1_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_0_2() { return cBindingAssignment_0_2; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_0_2_0() { return cBindingBindingParserRuleCall_0_2_0; }
		
		//(type=TypeAnnotation)?
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }
		
		//TypeAnnotation
		public RuleCall getTypeTypeAnnotationParserRuleCall_0_3_0() { return cTypeTypeAnnotationParserRuleCall_0_3_0; }
		
		//elseBlock=BracedBlock
		public Assignment getElseBlockAssignment_1() { return cElseBlockAssignment_1; }
		
		//BracedBlock
		public RuleCall getElseBlockBracedBlockParserRuleCall_1_0() { return cElseBlockBracedBlockParserRuleCall_1_0; }
	}
	public class IfConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.IfConditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsExpressionParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Assignment cIfBlocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfBlocksBracedBlockParserRuleCall_1_0 = (RuleCall)cIfBlocksAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseifKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionsExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionsAssignment_2_1.eContents().get(0);
		private final Assignment cIfBlocksAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIfBlocksBracedBlockParserRuleCall_2_2_0 = (RuleCall)cIfBlocksAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseBlockAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseBlockBracedBlockParserRuleCall_3_1_0 = (RuleCall)cElseBlockAssignment_3_1.eContents().get(0);
		
		//IfConditions:
		//    conditions+=Expression ifBlocks+=BracedBlock
		//    ('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
		//    ('else' elseBlock=BracedBlock)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=Expression ifBlocks+=BracedBlock
		//('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
		//('else' elseBlock=BracedBlock)?
		public Group getGroup() { return cGroup; }
		
		//conditions+=Expression
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//Expression
		public RuleCall getConditionsExpressionParserRuleCall_0_0() { return cConditionsExpressionParserRuleCall_0_0; }
		
		//ifBlocks+=BracedBlock
		public Assignment getIfBlocksAssignment_1() { return cIfBlocksAssignment_1; }
		
		//BracedBlock
		public RuleCall getIfBlocksBracedBlockParserRuleCall_1_0() { return cIfBlocksBracedBlockParserRuleCall_1_0; }
		
		//('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'elseif'
		public Keyword getElseifKeyword_2_0() { return cElseifKeyword_2_0; }
		
		//conditions+=Expression
		public Assignment getConditionsAssignment_2_1() { return cConditionsAssignment_2_1; }
		
		//Expression
		public RuleCall getConditionsExpressionParserRuleCall_2_1_0() { return cConditionsExpressionParserRuleCall_2_1_0; }
		
		//ifBlocks+=BracedBlock
		public Assignment getIfBlocksAssignment_2_2() { return cIfBlocksAssignment_2_2; }
		
		//BracedBlock
		public RuleCall getIfBlocksBracedBlockParserRuleCall_2_2_0() { return cIfBlocksBracedBlockParserRuleCall_2_2_0; }
		
		//('else' elseBlock=BracedBlock)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//elseBlock=BracedBlock
		public Assignment getElseBlockAssignment_3_1() { return cElseBlockAssignment_3_1; }
		
		//BracedBlock
		public RuleCall getElseBlockBracedBlockParserRuleCall_3_1_0() { return cElseBlockBracedBlockParserRuleCall_3_1_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBracedBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//While:
		//    'while' condition=Expression block=BracedBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=Expression block=BracedBlock
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//block=BracedBlock
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//BracedBlock
		public RuleCall getBlockBracedBlockParserRuleCall_2_0() { return cBlockBracedBlockParserRuleCall_2_0; }
	}
	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Break:
		//    {Break} 'break'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Break} 'break'
		public Group getGroup() { return cGroup; }
		
		//{Break}
		public Action getBreakAction_0() { return cBreakAction_0; }
		
		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBindingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindingBindingParserRuleCall_1_0 = (RuleCall)cBindingAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeTypeAnnotationParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBracedBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		///*************************************************************
		// * Functions
		// ************************************************************/
		//Function:
		//    'function' binding=Binding '('
		//        (parameters+=Parameter (',' parameters+=Parameter)* ','?)?
		//    ')'
		//    (returnType=TypeAnnotation)?
		//    body=BracedBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' binding=Binding '('
		//    (parameters+=Parameter (',' parameters+=Parameter)* ','?)?
		//')'
		//(returnType=TypeAnnotation)?
		//body=BracedBlock
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_1() { return cBindingAssignment_1; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_1_0() { return cBindingBindingParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)* ','?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(returnType=TypeAnnotation)?
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//TypeAnnotation
		public RuleCall getReturnTypeTypeAnnotationParserRuleCall_5_0() { return cReturnTypeTypeAnnotationParserRuleCall_5_0; }
		
		//body=BracedBlock
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//BracedBlock
		public RuleCall getBodyBracedBlockParserRuleCall_6_0() { return cBodyBracedBlockParserRuleCall_6_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		private final Assignment cBindingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingBindingParserRuleCall_2_0 = (RuleCall)cBindingAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeAnnotationParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Parameter:
		//    {Parameter}
		//    (mutable?='mut')? binding=Binding type=TypeAnnotation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter}
		//(mutable?='mut')? binding=Binding type=TypeAnnotation
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//(mutable?='mut')?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }
		
		//'mut'
		public Keyword getMutableMutKeyword_1_0() { return cMutableMutKeyword_1_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_2() { return cBindingAssignment_2; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_2_0() { return cBindingBindingParserRuleCall_2_0; }
		
		//type=TypeAnnotation
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeAnnotation
		public RuleCall getTypeTypeAnnotationParserRuleCall_3_0() { return cTypeTypeAnnotationParserRuleCall_3_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Return:
		//    {Return}
		//    'return' (expression=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Return}
		//'return' (expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{Return}
		public Action getReturnAction_0() { return cReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//(expression=Expression)?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ThrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Throw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThrowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Throw:
		//    {Throw}
		//    'throw' (expression=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Throw}
		//'throw' (expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{Throw}
		public Action getThrowAction_0() { return cThrowAction_0; }
		
		//'throw'
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }
		
		//(expression=Expression)?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	
	
	private final HaleElements pHale;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final BracedBlockElements pBracedBlock;
	private final ExpressionElements pExpression;
	private final Expression10Elements pExpression10;
	private final Expression9Elements pExpression9;
	private final Expression8Elements pExpression8;
	private final Expression7Elements pExpression7;
	private final Expression6Elements pExpression6;
	private final Expression5Elements pExpression5;
	private final Expression4Elements pExpression4;
	private final Expression3Elements pExpression3;
	private final Expression2Elements pExpression2;
	private final Expression1Elements pExpression1;
	private final Expression0Elements pExpression0;
	private final LiteralElements pLiteral;
	private final VoidLiteralElements pVoidLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final StringLiteralElements pStringLiteral;
	private final TypeAnnotationElements pTypeAnnotation;
	private final TypeElements pType;
	private final FunctionTypeElements pFunctionType;
	private final EitherTypeElements pEitherType;
	private final PrimaryTypeElements pPrimaryType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final BindingElements pBinding;
	private final LetBindingElements pLetBinding;
	private final BindingReferenceElements pBindingReference;
	private final AssignmentElements pAssignment;
	private final InputElements pInput;
	private final PrintElements pPrint;
	private final IfElements pIf;
	private final IfLetElements pIfLet;
	private final ElseLetElements pElseLet;
	private final IfConditionsElements pIfConditions;
	private final WhileElements pWhile;
	private final BreakElements pBreak;
	private final FunctionElements pFunction;
	private final ParameterElements pParameter;
	private final ReturnElements pReturn;
	private final ThrowElements pThrow;
	private final TerminalRule tPRIMITIVE_TYPE;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public HaleGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pHale = new HaleElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pBracedBlock = new BracedBlockElements();
		this.pExpression = new ExpressionElements();
		this.pExpression10 = new Expression10Elements();
		this.pExpression9 = new Expression9Elements();
		this.pExpression8 = new Expression8Elements();
		this.pExpression7 = new Expression7Elements();
		this.pExpression6 = new Expression6Elements();
		this.pExpression5 = new Expression5Elements();
		this.pExpression4 = new Expression4Elements();
		this.pExpression3 = new Expression3Elements();
		this.pExpression2 = new Expression2Elements();
		this.pExpression1 = new Expression1Elements();
		this.pExpression0 = new Expression0Elements();
		this.pLiteral = new LiteralElements();
		this.pVoidLiteral = new VoidLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pTypeAnnotation = new TypeAnnotationElements();
		this.pType = new TypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pEitherType = new EitherTypeElements();
		this.pPrimaryType = new PrimaryTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pBinding = new BindingElements();
		this.pLetBinding = new LetBindingElements();
		this.pBindingReference = new BindingReferenceElements();
		this.pAssignment = new AssignmentElements();
		this.pInput = new InputElements();
		this.pPrint = new PrintElements();
		this.pIf = new IfElements();
		this.pIfLet = new IfLetElements();
		this.pElseLet = new ElseLetElements();
		this.pIfConditions = new IfConditionsElements();
		this.pWhile = new WhileElements();
		this.pBreak = new BreakElements();
		this.pFunction = new FunctionElements();
		this.pParameter = new ParameterElements();
		this.pReturn = new ReturnElements();
		this.pThrow = new ThrowElements();
		this.tPRIMITIVE_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.PRIMITIVE_TYPE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.ID");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.DOUBLE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("willburden.hale.Hale".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///*************************************************************
	// * Top-level
	// ************************************************************/
	//Hale:
	//    {Hale}
	//    mainBlock=Block
	//;
	public HaleElements getHaleAccess() {
		return pHale;
	}
	
	public ParserRule getHaleRule() {
		return getHaleAccess().getRule();
	}
	
	//Block:
	//    {Block}
	//    (statements+=Statement | ';')*
	//;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//    BracedBlock |
	//    Function |
	//    If |
	//    While |
	//    ((
	//        Print |
	//        LetBinding |
	//        Assignment |
	//        Break |
	//        Return |
	//        Throw |
	//        Expression
	//    ) ';')
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//BracedBlock returns Block:
	//    '{' Block '}'
	//;
	public BracedBlockElements getBracedBlockAccess() {
		return pBracedBlock;
	}
	
	public ParserRule getBracedBlockRule() {
		return getBracedBlockAccess().getRule();
	}
	
	///*************************************************************
	// * Expressions
	// ************************************************************/
	//// Start with expressions of lowest precedence, since we
	//// are generating a syntax tree.
	//Expression returns Expression:
	//    Expression10
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression10 returns Expression:
	//    Expression9 ({Concatenation.left=current} '.' right=Expression9)*
	//;
	public Expression10Elements getExpression10Access() {
		return pExpression10;
	}
	
	public ParserRule getExpression10Rule() {
		return getExpression10Access().getRule();
	}
	
	//Expression9 returns Expression:
	//    Expression8 (
	//        ({LogicalAnd.left=current} 'and' right=Expression8) |
	//        ({LogicalOr.left=current} 'or' right=Expression8)
	//    )*
	//;
	public Expression9Elements getExpression9Access() {
		return pExpression9;
	}
	
	public ParserRule getExpression9Rule() {
		return getExpression9Access().getRule();
	}
	
	//Expression8 returns Expression:
	//    Expression7 (
	//        ({Equality.left=current} '==' right=Expression7) |
	//        ({Inequality.left=current} '!=' right=Expression7)
	//    )*
	//;
	public Expression8Elements getExpression8Access() {
		return pExpression8;
	}
	
	public ParserRule getExpression8Rule() {
		return getExpression8Access().getRule();
	}
	
	//Expression7 returns Expression:
	//    Expression6 (
	//        ({LessThanOrEqual.left=current} '<=' right=Expression6) |
	//        ({LessThan.left=current} '<' right=Expression6) |
	//        ({GreaterThanOrEqual.left=current} '>=' right=Expression6) |
	//        ({GreaterThan.left=current} '>' right=Expression6)
	//    )*
	//;
	public Expression7Elements getExpression7Access() {
		return pExpression7;
	}
	
	public ParserRule getExpression7Rule() {
		return getExpression7Access().getRule();
	}
	
	//Expression6 returns Expression:
	//    Expression5 (
	//        ({Addition.left=current} '+' right=Expression5) |
	//        ({Subtraction.left=current} '-' right=Expression5)
	//    )*
	//;
	public Expression6Elements getExpression6Access() {
		return pExpression6;
	}
	
	public ParserRule getExpression6Rule() {
		return getExpression6Access().getRule();
	}
	
	//Expression5 returns Expression:
	//    Expression4 (
	//        ({Multiplication.left=current} '*' right=Expression4) |
	//        ({Division.left=current} '/' right=Expression4) |
	//        ({Remainder.left=current} '%' right=Expression4)
	//    )*
	//;
	public Expression5Elements getExpression5Access() {
		return pExpression5;
	}
	
	public ParserRule getExpression5Rule() {
		return getExpression5Access().getRule();
	}
	
	//Expression4 returns Expression:
	//    Expression3 ({Exponentiation.left=current} '**' right=Expression3)*
	//;
	public Expression4Elements getExpression4Access() {
		return pExpression4;
	}
	
	public ParserRule getExpression4Rule() {
		return getExpression4Access().getRule();
	}
	
	//Expression3 returns Expression:
	//    Expression2 ({Conversion.left=current} 'as' right=Type)*
	//;
	public Expression3Elements getExpression3Access() {
		return pExpression3;
	}
	
	public ParserRule getExpression3Rule() {
		return getExpression3Access().getRule();
	}
	
	//Expression2 returns Expression:
	//    ({UnaryNegation} '-' inner=Expression2) |
	//    ({LogicalNot} 'not' inner=Expression2) |
	//    Expression1
	//;
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//Expression1 returns Expression:
	//    Expression0 ({Application.expression=current} '('
	//        (arguments+=Expression (',' arguments+=Expression)* ','?)?
	//    ')')*
	//;
	public Expression1Elements getExpression1Access() {
		return pExpression1;
	}
	
	public ParserRule getExpression1Rule() {
		return getExpression1Access().getRule();
	}
	
	//Expression0 returns Expression:
	//    Literal |
	//    Input |
	//    BindingReference |
	//    '(' Expression ')'
	//;
	public Expression0Elements getExpression0Access() {
		return pExpression0;
	}
	
	public ParserRule getExpression0Rule() {
		return getExpression0Access().getRule();
	}
	
	///*************************************************************
	// * Literals
	// ************************************************************/
	//Literal:
	//    VoidLiteral |
	//    BooleanLiteral |
	//    NumberLiteral |
	//    StringLiteral
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//VoidLiteral:
	//    {VoidLiteral} 'void'
	//;
	public VoidLiteralElements getVoidLiteralAccess() {
		return pVoidLiteral;
	}
	
	public ParserRule getVoidLiteralRule() {
		return getVoidLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    value=BOOLEAN
	//;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	//    value=DOUBLE
	//;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	///*************************************************************
	// * Types
	// ************************************************************/
	//TypeAnnotation returns Type:
	//    ':' Type
	//;
	public TypeAnnotationElements getTypeAnnotationAccess() {
		return pTypeAnnotation;
	}
	
	public ParserRule getTypeAnnotationRule() {
		return getTypeAnnotationAccess().getRule();
	}
	
	//Type returns Type:
	//    FunctionType
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//FunctionType returns Type:
	//    (
	//        {FunctionType}
	//        'Function' '('
	//            (paramTypes+=Type (',' paramTypes+=Type)* ','?)?
	//        ')'
	//        (returnType=TypeAnnotation)?
	//    ) |
	//    EitherType
	//;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//EitherType returns Type:
	//    PrimaryType ({EitherType.left=current} '?' right=PrimaryType)*
	//;
	public EitherTypeElements getEitherTypeAccess() {
		return pEitherType;
	}
	
	public ParserRule getEitherTypeRule() {
		return getEitherTypeAccess().getRule();
	}
	
	//PrimaryType returns Type:
	//    PrimitiveType |
	//    '(' Type ')'
	//;
	public PrimaryTypeElements getPrimaryTypeAccess() {
		return pPrimaryType;
	}
	
	public ParserRule getPrimaryTypeRule() {
		return getPrimaryTypeAccess().getRule();
	}
	
	//PrimitiveType returns Type:
	//    {PrimitiveType}
	//    type=PRIMITIVE_TYPE
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	///*************************************************************
	// * Bindings
	// ************************************************************/
	//Binding:
	//    name=ID
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//LetBinding:
	//    'let' (mutable?='mut')? binding=Binding
	//    (type=TypeAnnotation)? '=' expression=Expression
	//;
	public LetBindingElements getLetBindingAccess() {
		return pLetBinding;
	}
	
	public ParserRule getLetBindingRule() {
		return getLetBindingAccess().getRule();
	}
	
	//BindingReference:
	//    binding=[Binding]
	//;
	public BindingReferenceElements getBindingReferenceAccess() {
		return pBindingReference;
	}
	
	public ParserRule getBindingReferenceRule() {
		return getBindingReferenceAccess().getRule();
	}
	
	//Assignment:
	//    binding=[Binding] '=' expression=Expression
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	///*************************************************************
	// * Input/Output
	// ************************************************************/
	//Input:
	//    {Input} 'input'
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Print:
	//    'print' expression=Expression
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	///*************************************************************
	// * Control flow
	// ************************************************************/
	//If:
	//    'if' (IfLet | IfConditions)
	//;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//IfLet:
	//    'let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?
	//    '=' expression=Expression
	//        ifBlock=BracedBlock
	//    ('else' elseLet=ElseLet)?
	//;
	public IfLetElements getIfLetAccess() {
		return pIfLet;
	}
	
	public ParserRule getIfLetRule() {
		return getIfLetAccess().getRule();
	}
	
	//ElseLet:
	//    ('let' (mutable?='mut')? binding=Binding (type=TypeAnnotation)?)?
	//        elseBlock=BracedBlock
	//;
	public ElseLetElements getElseLetAccess() {
		return pElseLet;
	}
	
	public ParserRule getElseLetRule() {
		return getElseLetAccess().getRule();
	}
	
	//IfConditions:
	//    conditions+=Expression ifBlocks+=BracedBlock
	//    ('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
	//    ('else' elseBlock=BracedBlock)?
	//;
	public IfConditionsElements getIfConditionsAccess() {
		return pIfConditions;
	}
	
	public ParserRule getIfConditionsRule() {
		return getIfConditionsAccess().getRule();
	}
	
	//While:
	//    'while' condition=Expression block=BracedBlock
	//;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Break:
	//    {Break} 'break'
	//;
	public BreakElements getBreakAccess() {
		return pBreak;
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}
	
	///*************************************************************
	// * Functions
	// ************************************************************/
	//Function:
	//    'function' binding=Binding '('
	//        (parameters+=Parameter (',' parameters+=Parameter)* ','?)?
	//    ')'
	//    (returnType=TypeAnnotation)?
	//    body=BracedBlock
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Parameter:
	//    {Parameter}
	//    (mutable?='mut')? binding=Binding type=TypeAnnotation
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Return:
	//    {Return}
	//    'return' (expression=Expression)?
	//;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Throw:
	//    {Throw}
	//    'throw' (expression=Expression)?
	//;
	public ThrowElements getThrowAccess() {
		return pThrow;
	}
	
	public ParserRule getThrowRule() {
		return getThrowAccess().getRule();
	}
	
	///*************************************************************
	// * Terminals
	// ************************************************************/
	//terminal PRIMITIVE_TYPE: 'Void' | 'Boolean' | 'Number' | 'String';
	public TerminalRule getPRIMITIVE_TYPERule() {
		return tPRIMITIVE_TYPE;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean: 'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal DOUBLE returns ecore::EDouble: ('0'..'9')+ ('.' ('0'..'9')+)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
