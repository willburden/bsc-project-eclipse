/*
 * generated by Xtext 2.34.0
 */
package willburden.hale.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HaleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class HaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Hale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		///*************************************************************
		// * Top-level
		// ************************************************************/
		//Hale:
		//    {Hale} block=Block
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Hale} block=Block
		public Group getGroup() { return cGroup; }
		
		//{Hale}
		public Action getHaleAction_0() { return cHaleAction_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Block:
		//    {Block}
		//    (statements+=Statement)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}
		//(statements+=Statement)*
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//(statements+=Statement)*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEmptyStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cBindingParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cPrintParserRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//    {EmptyStatement} ';' |
		//    ((
		//        Expression |
		//        Binding |
		//        Assignment |
		//        Print
		//    ) ';') |
		//    If
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyStatement} ';' |
		//((
		//    Expression |
		//    Binding |
		//    Assignment |
		//    Print
		//) ';') |
		//If
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EmptyStatement} ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//{EmptyStatement}
		public Action getEmptyStatementAction_0_0() { return cEmptyStatementAction_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//((
		//    Expression |
		//    Binding |
		//    Assignment |
		//    Print
		//) ';')
		public Group getGroup_1() { return cGroup_1; }
		
		//(
		//        Expression |
		//        Binding |
		//        Assignment |
		//        Print
		//    )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_0_0() { return cExpressionParserRuleCall_1_0_0; }
		
		//Binding
		public RuleCall getBindingParserRuleCall_1_0_1() { return cBindingParserRuleCall_1_0_1; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1_0_2() { return cAssignmentParserRuleCall_1_0_2; }
		
		//Print
		public RuleCall getPrintParserRuleCall_1_0_3() { return cPrintParserRuleCall_1_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//If
		public RuleCall getIfParserRuleCall_2() { return cIfParserRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression");
		private final RuleCall cExpression7ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*************************************************************
		// * Expressions
		// ************************************************************/
		//// Start with expressions of lowest precedence.
		//Expression returns Expression:
		//    Expression7
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression7
		public RuleCall getExpression7ParserRuleCall() { return cExpression7ParserRuleCall; }
	}
	public class Expression7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression7");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cLogicalAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression6ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLogicalOrLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression6ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Expression7 returns Expression:
		//    Expression6 (
		//        ({LogicalAnd.left=current} 'and' right=Expression6) |
		//        ({LogicalOr.left=current} 'or' right=Expression6)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression6 (
		//    ({LogicalAnd.left=current} 'and' right=Expression6) |
		//    ({LogicalOr.left=current} 'or' right=Expression6)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression6
		public RuleCall getExpression6ParserRuleCall_0() { return cExpression6ParserRuleCall_0; }
		
		//(
		//       ({LogicalAnd.left=current} 'and' right=Expression6) |
		//       ({LogicalOr.left=current} 'or' right=Expression6)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({LogicalAnd.left=current} 'and' right=Expression6)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LogicalAnd.left=current}
		public Action getLogicalAndLeftAction_1_0_0() { return cLogicalAndLeftAction_1_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_1() { return cAndKeyword_1_0_1; }
		
		//right=Expression6
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression6
		public RuleCall getRightExpression6ParserRuleCall_1_0_2_0() { return cRightExpression6ParserRuleCall_1_0_2_0; }
		
		//({LogicalOr.left=current} 'or' right=Expression6)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LogicalOr.left=current}
		public Action getLogicalOrLeftAction_1_1_0() { return cLogicalOrLeftAction_1_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1_1() { return cOrKeyword_1_1_1; }
		
		//right=Expression6
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression6
		public RuleCall getRightExpression6ParserRuleCall_1_1_2_0() { return cRightExpression6ParserRuleCall_1_1_2_0; }
	}
	public class Expression6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEqualityLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression5ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInequalityLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression5ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Expression6 returns Expression:
		//    Expression5 (
		//        ({Equality.left=current} '==' right=Expression5) |
		//        ({Inequality.left=current} '!=' right=Expression5)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression5 (
		//    ({Equality.left=current} '==' right=Expression5) |
		//    ({Inequality.left=current} '!=' right=Expression5)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression5
		public RuleCall getExpression5ParserRuleCall_0() { return cExpression5ParserRuleCall_0; }
		
		//(
		//       ({Equality.left=current} '==' right=Expression5) |
		//       ({Inequality.left=current} '!=' right=Expression5)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Equality.left=current} '==' right=Expression5)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0_0() { return cEqualityLeftAction_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }
		
		//right=Expression5
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression5
		public RuleCall getRightExpression5ParserRuleCall_1_0_2_0() { return cRightExpression5ParserRuleCall_1_0_2_0; }
		
		//({Inequality.left=current} '!=' right=Expression5)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Inequality.left=current}
		public Action getInequalityLeftAction_1_1_0() { return cInequalityLeftAction_1_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }
		
		//right=Expression5
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression5
		public RuleCall getRightExpression5ParserRuleCall_1_1_2_0() { return cRightExpression5ParserRuleCall_1_1_2_0; }
	}
	public class Expression5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cLessThanOrEqualLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLessThanLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cGreaterThanOrEqualLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cGreaterThanLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//Expression5 returns Expression:
		//    Expression4 (
		//        ({LessThanOrEqual.left=current} '<=' right=Expression4) |
		//        ({LessThan.left=current} '<' right=Expression4) |
		//        ({GreaterThanOrEqual.left=current} '>=' right=Expression4) |
		//        ({GreaterThan.left=current} '>' right=Expression4)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression4 (
		//    ({LessThanOrEqual.left=current} '<=' right=Expression4) |
		//    ({LessThan.left=current} '<' right=Expression4) |
		//    ({GreaterThanOrEqual.left=current} '>=' right=Expression4) |
		//    ({GreaterThan.left=current} '>' right=Expression4)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression4
		public RuleCall getExpression4ParserRuleCall_0() { return cExpression4ParserRuleCall_0; }
		
		//(
		//       ({LessThanOrEqual.left=current} '<=' right=Expression4) |
		//       ({LessThan.left=current} '<' right=Expression4) |
		//       ({GreaterThanOrEqual.left=current} '>=' right=Expression4) |
		//       ({GreaterThan.left=current} '>' right=Expression4)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({LessThanOrEqual.left=current} '<=' right=Expression4)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LessThanOrEqual.left=current}
		public Action getLessThanOrEqualLeftAction_1_0_0() { return cLessThanOrEqualLeftAction_1_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1() { return cLessThanSignEqualsSignKeyword_1_0_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_0_2_0() { return cRightExpression4ParserRuleCall_1_0_2_0; }
		
		//({LessThan.left=current} '<' right=Expression4)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LessThan.left=current}
		public Action getLessThanLeftAction_1_1_0() { return cLessThanLeftAction_1_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_1() { return cLessThanSignKeyword_1_1_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_1_2_0() { return cRightExpression4ParserRuleCall_1_1_2_0; }
		
		//({GreaterThanOrEqual.left=current} '>=' right=Expression4)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{GreaterThanOrEqual.left=current}
		public Action getGreaterThanOrEqualLeftAction_1_2_0() { return cGreaterThanOrEqualLeftAction_1_2_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_2_1() { return cGreaterThanSignEqualsSignKeyword_1_2_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_2_2_0() { return cRightExpression4ParserRuleCall_1_2_2_0; }
		
		//({GreaterThan.left=current} '>' right=Expression4)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{GreaterThan.left=current}
		public Action getGreaterThanLeftAction_1_3_0() { return cGreaterThanLeftAction_1_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3_1() { return cGreaterThanSignKeyword_1_3_1; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_3_2_0() { return cRightExpression4ParserRuleCall_1_3_2_0; }
	}
	public class Expression4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Expression4 returns Expression:
		//    Expression3 (
		//        ({Addition.left=current} '+' right=Expression3) |
		//        ({Subtraction.left=current} '-' right=Expression3)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression3 (
		//    ({Addition.left=current} '+' right=Expression3) |
		//    ({Subtraction.left=current} '-' right=Expression3)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression3
		public RuleCall getExpression3ParserRuleCall_0() { return cExpression3ParserRuleCall_0; }
		
		//(
		//       ({Addition.left=current} '+' right=Expression3) |
		//       ({Subtraction.left=current} '-' right=Expression3)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Addition.left=current} '+' right=Expression3)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_0() { return cAdditionLeftAction_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=Expression3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression3
		public RuleCall getRightExpression3ParserRuleCall_1_0_2_0() { return cRightExpression3ParserRuleCall_1_0_2_0; }
		
		//({Subtraction.left=current} '-' right=Expression3)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_1_0() { return cSubtractionLeftAction_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=Expression3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression3
		public RuleCall getRightExpression3ParserRuleCall_1_1_2_0() { return cRightExpression3ParserRuleCall_1_1_2_0; }
	}
	public class Expression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression2ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cRemainderLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpression2ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//Expression3 returns Expression:
		//    Expression2 (
		//        ({Multiplication.left=current} '*' right=Expression2) |
		//        ({Division.left=current} '/' right=Expression2) |
		//        ({Remainder.left=current} '%' right=Expression2)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression2 (
		//    ({Multiplication.left=current} '*' right=Expression2) |
		//    ({Division.left=current} '/' right=Expression2) |
		//    ({Remainder.left=current} '%' right=Expression2)
		//)*
		public Group getGroup() { return cGroup; }
		
		//Expression2
		public RuleCall getExpression2ParserRuleCall_0() { return cExpression2ParserRuleCall_0; }
		
		//(
		//       ({Multiplication.left=current} '*' right=Expression2) |
		//       ({Division.left=current} '/' right=Expression2) |
		//       ({Remainder.left=current} '%' right=Expression2)
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Multiplication.left=current} '*' right=Expression2)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0() { return cMultiplicationLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=Expression2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression2
		public RuleCall getRightExpression2ParserRuleCall_1_0_2_0() { return cRightExpression2ParserRuleCall_1_0_2_0; }
		
		//({Division.left=current} '/' right=Expression2)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_1_0() { return cDivisionLeftAction_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=Expression2
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression2
		public RuleCall getRightExpression2ParserRuleCall_1_1_2_0() { return cRightExpression2ParserRuleCall_1_1_2_0; }
		
		//({Remainder.left=current} '%' right=Expression2)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{Remainder.left=current}
		public Action getRemainderLeftAction_1_2_0() { return cRemainderLeftAction_1_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_2_1() { return cPercentSignKeyword_1_2_1; }
		
		//right=Expression2
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Expression2
		public RuleCall getRightExpression2ParserRuleCall_1_2_2_0() { return cRightExpression2ParserRuleCall_1_2_2_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentiationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression2 returns Expression:
		//    Expression1 ({Exponentiation.left=current} '**' right=Expression1)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression1 ({Exponentiation.left=current} '**' right=Expression1)*
		public Group getGroup() { return cGroup; }
		
		//Expression1
		public RuleCall getExpression1ParserRuleCall_0() { return cExpression1ParserRuleCall_0; }
		
		//({Exponentiation.left=current} '**' right=Expression1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exponentiation.left=current}
		public Action getExponentiationLeftAction_1_0() { return cExponentiationLeftAction_1_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }
		
		//right=Expression1
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression1
		public RuleCall getRightExpression1ParserRuleCall_1_2_0() { return cRightExpression1ParserRuleCall_1_2_0; }
	}
	public class Expression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerExpression1ParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInnerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInnerExpression1ParserRuleCall_1_2_0 = (RuleCall)cInnerAssignment_1_2.eContents().get(0);
		private final RuleCall cPrimaryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression1 returns Expression:
		//    ({UnaryNegation} '-' inner=Expression1) |
		//    ({LogicalNot} 'not' inner=Expression1) |
		//    Primary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//({UnaryNegation} '-' inner=Expression1) |
		//({LogicalNot} 'not' inner=Expression1) |
		//Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({UnaryNegation} '-' inner=Expression1)
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryNegation}
		public Action getUnaryNegationAction_0_0() { return cUnaryNegationAction_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//inner=Expression1
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Expression1
		public RuleCall getInnerExpression1ParserRuleCall_0_2_0() { return cInnerExpression1ParserRuleCall_0_2_0; }
		
		//({LogicalNot} 'not' inner=Expression1)
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalNot}
		public Action getLogicalNotAction_1_0() { return cLogicalNotAction_1_0; }
		
		//'not'
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
		
		//inner=Expression1
		public Assignment getInnerAssignment_1_2() { return cInnerAssignment_1_2; }
		
		//Expression1
		public RuleCall getInnerExpression1ParserRuleCall_1_2_0() { return cInnerExpression1ParserRuleCall_1_2_0; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_2() { return cPrimaryParserRuleCall_2; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBindingReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns Expression:
		//    Literal |
		//    BindingReference |
		//    '(' Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal |
		//BindingReference |
		//'(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//BindingReference
		public RuleCall getBindingReferenceParserRuleCall_1() { return cBindingReferenceParserRuleCall_1; }
		
		//'(' Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*************************************************************
		// * Literals
		// ************************************************************/
		//Literal:
		//    NumberLiteral |
		//    StringLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral |
		//StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		///*************************************************************
		// * Bindings
		// ************************************************************/
		//Binding:
		//    'let' (mutable?='mut')? name=ID '=' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' (mutable?='mut')? name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//(mutable?='mut')?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }
		
		//'mut'
		public Keyword getMutableMutKeyword_1_0() { return cMutableMutKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }
	}
	public class BindingReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BindingReference");
		private final Assignment cBindingAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cBindingBindingCrossReference_0 = (CrossReference)cBindingAssignment.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_0_1 = (RuleCall)cBindingBindingCrossReference_0.eContents().get(1);
		
		//BindingReference:
		//    binding=[Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=[Binding]
		public Assignment getBindingAssignment() { return cBindingAssignment; }
		
		//[Binding]
		public CrossReference getBindingBindingCrossReference_0() { return cBindingBindingCrossReference_0; }
		
		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_0_1() { return cBindingBindingIDTerminalRuleCall_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBindingBindingCrossReference_0_0 = (CrossReference)cBindingAssignment_0.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_0_0_1 = (RuleCall)cBindingBindingCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//    binding=[Binding] '=' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=[Binding] '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//binding=[Binding]
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//[Binding]
		public CrossReference getBindingBindingCrossReference_0_0() { return cBindingBindingCrossReference_0_0; }
		
		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_0_0_1() { return cBindingBindingIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		///*************************************************************
		// * Input/Output
		// ************************************************************/
		//Print:
		//    'print' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionsExpressionParserRuleCall_1_0 = (RuleCall)cConditionsAssignment_1.eContents().get(0);
		private final Assignment cIfBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfBlocksBracedBlockParserRuleCall_2_0 = (RuleCall)cIfBlocksAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseifKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionsExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionsAssignment_3_1.eContents().get(0);
		private final Assignment cIfBlocksAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIfBlocksBracedBlockParserRuleCall_3_2_0 = (RuleCall)cIfBlocksAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseBlockAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseBlockBracedBlockParserRuleCall_4_1_0 = (RuleCall)cElseBlockAssignment_4_1.eContents().get(0);
		
		///*************************************************************
		// * Control flow
		// ************************************************************/
		//If:
		//    'if' conditions+=Expression ifBlocks+=BracedBlock
		//    ('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
		//    ('else' elseBlock=BracedBlock)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' conditions+=Expression ifBlocks+=BracedBlock
		//('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
		//('else' elseBlock=BracedBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//conditions+=Expression
		public Assignment getConditionsAssignment_1() { return cConditionsAssignment_1; }
		
		//Expression
		public RuleCall getConditionsExpressionParserRuleCall_1_0() { return cConditionsExpressionParserRuleCall_1_0; }
		
		//ifBlocks+=BracedBlock
		public Assignment getIfBlocksAssignment_2() { return cIfBlocksAssignment_2; }
		
		//BracedBlock
		public RuleCall getIfBlocksBracedBlockParserRuleCall_2_0() { return cIfBlocksBracedBlockParserRuleCall_2_0; }
		
		//('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'elseif'
		public Keyword getElseifKeyword_3_0() { return cElseifKeyword_3_0; }
		
		//conditions+=Expression
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//Expression
		public RuleCall getConditionsExpressionParserRuleCall_3_1_0() { return cConditionsExpressionParserRuleCall_3_1_0; }
		
		//ifBlocks+=BracedBlock
		public Assignment getIfBlocksAssignment_3_2() { return cIfBlocksAssignment_3_2; }
		
		//BracedBlock
		public RuleCall getIfBlocksBracedBlockParserRuleCall_3_2_0() { return cIfBlocksBracedBlockParserRuleCall_3_2_0; }
		
		//('else' elseBlock=BracedBlock)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseBlock=BracedBlock
		public Assignment getElseBlockAssignment_4_1() { return cElseBlockAssignment_4_1; }
		
		//BracedBlock
		public RuleCall getElseBlockBracedBlockParserRuleCall_4_1_0() { return cElseBlockBracedBlockParserRuleCall_4_1_0; }
	}
	public class BracedBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BracedBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracedBlock returns Block:
		//    '{' Block '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' Block '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	
	private final HaleElements pHale;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final Expression7Elements pExpression7;
	private final Expression6Elements pExpression6;
	private final Expression5Elements pExpression5;
	private final Expression4Elements pExpression4;
	private final Expression3Elements pExpression3;
	private final Expression2Elements pExpression2;
	private final Expression1Elements pExpression1;
	private final PrimaryElements pPrimary;
	private final LiteralElements pLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BindingElements pBinding;
	private final BindingReferenceElements pBindingReference;
	private final AssignmentElements pAssignment;
	private final PrintElements pPrint;
	private final IfElements pIf;
	private final BracedBlockElements pBracedBlock;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HaleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHale = new HaleElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pExpression7 = new Expression7Elements();
		this.pExpression6 = new Expression6Elements();
		this.pExpression5 = new Expression5Elements();
		this.pExpression4 = new Expression4Elements();
		this.pExpression3 = new Expression3Elements();
		this.pExpression2 = new Expression2Elements();
		this.pExpression1 = new Expression1Elements();
		this.pPrimary = new PrimaryElements();
		this.pLiteral = new LiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBinding = new BindingElements();
		this.pBindingReference = new BindingReferenceElements();
		this.pAssignment = new AssignmentElements();
		this.pPrint = new PrintElements();
		this.pIf = new IfElements();
		this.pBracedBlock = new BracedBlockElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("willburden.hale.Hale".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*************************************************************
	// * Top-level
	// ************************************************************/
	//Hale:
	//    {Hale} block=Block
	//;
	public HaleElements getHaleAccess() {
		return pHale;
	}
	
	public ParserRule getHaleRule() {
		return getHaleAccess().getRule();
	}
	
	//Block:
	//    {Block}
	//    (statements+=Statement)*
	//;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//    {EmptyStatement} ';' |
	//    ((
	//        Expression |
	//        Binding |
	//        Assignment |
	//        Print
	//    ) ';') |
	//    If
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	///*************************************************************
	// * Expressions
	// ************************************************************/
	//// Start with expressions of lowest precedence.
	//Expression returns Expression:
	//    Expression7
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression7 returns Expression:
	//    Expression6 (
	//        ({LogicalAnd.left=current} 'and' right=Expression6) |
	//        ({LogicalOr.left=current} 'or' right=Expression6)
	//    )*
	//;
	public Expression7Elements getExpression7Access() {
		return pExpression7;
	}
	
	public ParserRule getExpression7Rule() {
		return getExpression7Access().getRule();
	}
	
	//Expression6 returns Expression:
	//    Expression5 (
	//        ({Equality.left=current} '==' right=Expression5) |
	//        ({Inequality.left=current} '!=' right=Expression5)
	//    )*
	//;
	public Expression6Elements getExpression6Access() {
		return pExpression6;
	}
	
	public ParserRule getExpression6Rule() {
		return getExpression6Access().getRule();
	}
	
	//Expression5 returns Expression:
	//    Expression4 (
	//        ({LessThanOrEqual.left=current} '<=' right=Expression4) |
	//        ({LessThan.left=current} '<' right=Expression4) |
	//        ({GreaterThanOrEqual.left=current} '>=' right=Expression4) |
	//        ({GreaterThan.left=current} '>' right=Expression4)
	//    )*
	//;
	public Expression5Elements getExpression5Access() {
		return pExpression5;
	}
	
	public ParserRule getExpression5Rule() {
		return getExpression5Access().getRule();
	}
	
	//Expression4 returns Expression:
	//    Expression3 (
	//        ({Addition.left=current} '+' right=Expression3) |
	//        ({Subtraction.left=current} '-' right=Expression3)
	//    )*
	//;
	public Expression4Elements getExpression4Access() {
		return pExpression4;
	}
	
	public ParserRule getExpression4Rule() {
		return getExpression4Access().getRule();
	}
	
	//Expression3 returns Expression:
	//    Expression2 (
	//        ({Multiplication.left=current} '*' right=Expression2) |
	//        ({Division.left=current} '/' right=Expression2) |
	//        ({Remainder.left=current} '%' right=Expression2)
	//    )*
	//;
	public Expression3Elements getExpression3Access() {
		return pExpression3;
	}
	
	public ParserRule getExpression3Rule() {
		return getExpression3Access().getRule();
	}
	
	//Expression2 returns Expression:
	//    Expression1 ({Exponentiation.left=current} '**' right=Expression1)*
	//;
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//Expression1 returns Expression:
	//    ({UnaryNegation} '-' inner=Expression1) |
	//    ({LogicalNot} 'not' inner=Expression1) |
	//    Primary
	//;
	public Expression1Elements getExpression1Access() {
		return pExpression1;
	}
	
	public ParserRule getExpression1Rule() {
		return getExpression1Access().getRule();
	}
	
	//Primary returns Expression:
	//    Literal |
	//    BindingReference |
	//    '(' Expression ')'
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	///*************************************************************
	// * Literals
	// ************************************************************/
	//Literal:
	//    NumberLiteral |
	//    StringLiteral
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	//    value=INT
	//;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	///*************************************************************
	// * Bindings
	// ************************************************************/
	//Binding:
	//    'let' (mutable?='mut')? name=ID '=' value=Expression
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//BindingReference:
	//    binding=[Binding]
	//;
	public BindingReferenceElements getBindingReferenceAccess() {
		return pBindingReference;
	}
	
	public ParserRule getBindingReferenceRule() {
		return getBindingReferenceAccess().getRule();
	}
	
	//Assignment:
	//    binding=[Binding] '=' value=Expression
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	///*************************************************************
	// * Input/Output
	// ************************************************************/
	//Print:
	//    'print' value=Expression
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	///*************************************************************
	// * Control flow
	// ************************************************************/
	//If:
	//    'if' conditions+=Expression ifBlocks+=BracedBlock
	//    ('elseif' conditions+=Expression ifBlocks+=BracedBlock)*
	//    ('else' elseBlock=BracedBlock)?
	//;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//BracedBlock returns Block:
	//    '{' Block '}'
	//;
	public BracedBlockElements getBracedBlockAccess() {
		return pBracedBlock;
	}
	
	public ParserRule getBracedBlockRule() {
		return getBracedBlockAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
