/*
 * generated by Xtext 2.34.0
 */
package willburden.hale.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HaleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class HaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Hale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		///*************************************************************
		// * Top-level
		// ************************************************************/
		//Hale:
		//    {Hale} (statements+=Statement)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Hale} (statements+=Statement)*
		public Group getGroup() { return cGroup; }
		
		//{Hale}
		public Action getHaleAction_0() { return cHaleAction_0; }
		
		//(statements+=Statement)*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPrintParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBindingParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//    (Print | Binding | Assignment | Expression) ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Print | Binding | Assignment | Expression) ';'
		public Group getGroup() { return cGroup; }
		
		//(Print | Binding | Assignment | Expression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0_0() { return cPrintParserRuleCall_0_0; }
		
		//Binding
		public RuleCall getBindingParserRuleCall_0_1() { return cBindingParserRuleCall_0_1; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0_2() { return cAssignmentParserRuleCall_0_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_3() { return cExpressionParserRuleCall_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Print:
		//    'print' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		///*************************************************************
		// * Bindings
		// ************************************************************/
		//Binding:
		//    'let' (mutable?='mut')? name=ID '=' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' (mutable?='mut')? name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//(mutable?='mut')?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }
		
		//'mut'
		public Keyword getMutableMutKeyword_1_0() { return cMutableMutKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }
	}
	public class BindingReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.BindingReference");
		private final Assignment cBindingAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cBindingBindingCrossReference_0 = (CrossReference)cBindingAssignment.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_0_1 = (RuleCall)cBindingBindingCrossReference_0.eContents().get(1);
		
		//BindingReference:
		//    binding=[Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=[Binding]
		public Assignment getBindingAssignment() { return cBindingAssignment; }
		
		//[Binding]
		public CrossReference getBindingBindingCrossReference_0() { return cBindingBindingCrossReference_0; }
		
		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_0_1() { return cBindingBindingIDTerminalRuleCall_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBindingBindingCrossReference_0_0 = (CrossReference)cBindingAssignment_0.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_0_0_1 = (RuleCall)cBindingBindingCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//    binding=[Binding] '=' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=[Binding] '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//binding=[Binding]
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//[Binding]
		public CrossReference getBindingBindingCrossReference_0_0() { return cBindingBindingCrossReference_0_0; }
		
		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_0_0_1() { return cBindingBindingIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cSubtractionLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cAdditionLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		///*************************************************************
		// * Expressions
		// ************************************************************/
		//// Binary operations are left-associative
		//// When mixing operators, explicit precedence with parentheses is required
		//Expression:
		//    TerminalExpression (
		//        ({Multiplication.left=current} '*' right=TerminalExpression)+ |
		//        ({Division.left=current} '/' right=TerminalExpression)+ |
		//        ({Subtraction.left=current} '-' right=TerminalExpression)+ |
		//        ({Addition.left=current} '+' right=TerminalExpression)+
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression (
		//    ({Multiplication.left=current} '*' right=TerminalExpression)+ |
		//    ({Division.left=current} '/' right=TerminalExpression)+ |
		//    ({Subtraction.left=current} '-' right=TerminalExpression)+ |
		//    ({Addition.left=current} '+' right=TerminalExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//(
		//       ({Multiplication.left=current} '*' right=TerminalExpression)+ |
		//       ({Division.left=current} '/' right=TerminalExpression)+ |
		//       ({Subtraction.left=current} '-' right=TerminalExpression)+ |
		//       ({Addition.left=current} '+' right=TerminalExpression)+
		//   )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Multiplication.left=current} '*' right=TerminalExpression)+
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0() { return cMultiplicationLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_0_2_0() { return cRightTerminalExpressionParserRuleCall_1_0_2_0; }
		
		//({Division.left=current} '/' right=TerminalExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_1_0() { return cDivisionLeftAction_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_1_2_0() { return cRightTerminalExpressionParserRuleCall_1_1_2_0; }
		
		//({Subtraction.left=current} '-' right=TerminalExpression)+
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_2_0() { return cSubtractionLeftAction_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_1() { return cHyphenMinusKeyword_1_2_1; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_2_2_0() { return cRightTerminalExpressionParserRuleCall_1_2_2_0; }
		
		//({Addition.left=current} '+' right=TerminalExpression)+
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_3_0() { return cAdditionLeftAction_1_3_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3_1() { return cPlusSignKeyword_1_3_1; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_3_2_0() { return cRightTerminalExpressionParserRuleCall_1_3_2_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cBindingReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminalExpression returns Expression:
		//    '(' Expression ')' |
		//    BindingReference |
		//    Literal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' |
		//BindingReference |
		//Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//BindingReference
		public RuleCall getBindingReferenceParserRuleCall_1() { return cBindingReferenceParserRuleCall_1; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*************************************************************
		// * Literals
		// ************************************************************/
		//Literal:
		//    IntLiteral |
		//    StringLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral |
		//StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "willburden.hale.Hale.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	
	
	private final HaleElements pHale;
	private final StatementElements pStatement;
	private final PrintElements pPrint;
	private final BindingElements pBinding;
	private final BindingReferenceElements pBindingReference;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final TerminalExpressionElements pTerminalExpression;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final StringLiteralElements pStringLiteral;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HaleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHale = new HaleElements();
		this.pStatement = new StatementElements();
		this.pPrint = new PrintElements();
		this.pBinding = new BindingElements();
		this.pBindingReference = new BindingReferenceElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("willburden.hale.Hale".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*************************************************************
	// * Top-level
	// ************************************************************/
	//Hale:
	//    {Hale} (statements+=Statement)*
	//;
	public HaleElements getHaleAccess() {
		return pHale;
	}
	
	public ParserRule getHaleRule() {
		return getHaleAccess().getRule();
	}
	
	//Statement:
	//    (Print | Binding | Assignment | Expression) ';'
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Print:
	//    'print' value=Expression
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	///*************************************************************
	// * Bindings
	// ************************************************************/
	//Binding:
	//    'let' (mutable?='mut')? name=ID '=' value=Expression
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//BindingReference:
	//    binding=[Binding]
	//;
	public BindingReferenceElements getBindingReferenceAccess() {
		return pBindingReference;
	}
	
	public ParserRule getBindingReferenceRule() {
		return getBindingReferenceAccess().getRule();
	}
	
	//Assignment:
	//    binding=[Binding] '=' value=Expression
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	///*************************************************************
	// * Expressions
	// ************************************************************/
	//// Binary operations are left-associative
	//// When mixing operators, explicit precedence with parentheses is required
	//Expression:
	//    TerminalExpression (
	//        ({Multiplication.left=current} '*' right=TerminalExpression)+ |
	//        ({Division.left=current} '/' right=TerminalExpression)+ |
	//        ({Subtraction.left=current} '-' right=TerminalExpression)+ |
	//        ({Addition.left=current} '+' right=TerminalExpression)+
	//    )?
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//TerminalExpression returns Expression:
	//    '(' Expression ')' |
	//    BindingReference |
	//    Literal
	//;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	///*************************************************************
	// * Literals
	// ************************************************************/
	//Literal:
	//    IntLiteral |
	//    StringLiteral
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//    value=INT
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
