/**
 * generated by Xtext 2.34.0
 */
package willburden.hale.hale.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import willburden.hale.hale.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HaleFactoryImpl extends EFactoryImpl implements HaleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HaleFactory init()
  {
    try
    {
      HaleFactory theHaleFactory = (HaleFactory)EPackage.Registry.INSTANCE.getEFactory(HalePackage.eNS_URI);
      if (theHaleFactory != null)
      {
        return theHaleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HaleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HaleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HalePackage.HALE: return createHale();
      case HalePackage.BLOCK: return createBlock();
      case HalePackage.STATEMENT: return createStatement();
      case HalePackage.LITERAL: return createLiteral();
      case HalePackage.VOID_LITERAL: return createVoidLiteral();
      case HalePackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case HalePackage.NUMBER_LITERAL: return createNumberLiteral();
      case HalePackage.STRING_LITERAL: return createStringLiteral();
      case HalePackage.TYPE: return createType();
      case HalePackage.BINDING: return createBinding();
      case HalePackage.LET_BINDING: return createLetBinding();
      case HalePackage.BINDING_REFERENCE: return createBindingReference();
      case HalePackage.ASSIGNMENT: return createAssignment();
      case HalePackage.INPUT: return createInput();
      case HalePackage.PRINT: return createPrint();
      case HalePackage.IF: return createIf();
      case HalePackage.IF_LET: return createIfLet();
      case HalePackage.ELSE_LET: return createElseLet();
      case HalePackage.IF_CONDITIONS: return createIfConditions();
      case HalePackage.WHILE: return createWhile();
      case HalePackage.BREAK: return createBreak();
      case HalePackage.FUNCTION: return createFunction();
      case HalePackage.PARAMETER: return createParameter();
      case HalePackage.RETURN: return createReturn();
      case HalePackage.THROW: return createThrow();
      case HalePackage.EXPRESSION: return createExpression();
      case HalePackage.FUNCTION_TYPE: return createFunctionType();
      case HalePackage.EITHER_TYPE: return createEitherType();
      case HalePackage.PRIMITIVE_TYPE: return createPrimitiveType();
      case HalePackage.CONCATENATION: return createConcatenation();
      case HalePackage.LOGICAL_AND: return createLogicalAnd();
      case HalePackage.LOGICAL_OR: return createLogicalOr();
      case HalePackage.EQUALITY: return createEquality();
      case HalePackage.INEQUALITY: return createInequality();
      case HalePackage.LESS_THAN_OR_EQUAL: return createLessThanOrEqual();
      case HalePackage.LESS_THAN: return createLessThan();
      case HalePackage.GREATER_THAN_OR_EQUAL: return createGreaterThanOrEqual();
      case HalePackage.GREATER_THAN: return createGreaterThan();
      case HalePackage.ADDITION: return createAddition();
      case HalePackage.SUBTRACTION: return createSubtraction();
      case HalePackage.MULTIPLICATION: return createMultiplication();
      case HalePackage.DIVISION: return createDivision();
      case HalePackage.REMAINDER: return createRemainder();
      case HalePackage.EXPONENTIATION: return createExponentiation();
      case HalePackage.CONVERSION: return createConversion();
      case HalePackage.UNARY_NEGATION: return createUnaryNegation();
      case HalePackage.LOGICAL_NOT: return createLogicalNot();
      case HalePackage.APPLICATION: return createApplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Hale createHale()
  {
    HaleImpl hale = new HaleImpl();
    return hale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoidLiteral createVoidLiteral()
  {
    VoidLiteralImpl voidLiteral = new VoidLiteralImpl();
    return voidLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetBinding createLetBinding()
  {
    LetBindingImpl letBinding = new LetBindingImpl();
    return letBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BindingReference createBindingReference()
  {
    BindingReferenceImpl bindingReference = new BindingReferenceImpl();
    return bindingReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfLet createIfLet()
  {
    IfLetImpl ifLet = new IfLetImpl();
    return ifLet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseLet createElseLet()
  {
    ElseLetImpl elseLet = new ElseLetImpl();
    return elseLet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfConditions createIfConditions()
  {
    IfConditionsImpl ifConditions = new IfConditionsImpl();
    return ifConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public While createWhile()
  {
    WhileImpl while_ = new WhileImpl();
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Break createBreak()
  {
    BreakImpl break_ = new BreakImpl();
    return break_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Return createReturn()
  {
    ReturnImpl return_ = new ReturnImpl();
    return return_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Throw createThrow()
  {
    ThrowImpl throw_ = new ThrowImpl();
    return throw_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionType createFunctionType()
  {
    FunctionTypeImpl functionType = new FunctionTypeImpl();
    return functionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EitherType createEitherType()
  {
    EitherTypeImpl eitherType = new EitherTypeImpl();
    return eitherType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveType createPrimitiveType()
  {
    PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concatenation createConcatenation()
  {
    ConcatenationImpl concatenation = new ConcatenationImpl();
    return concatenation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalAnd createLogicalAnd()
  {
    LogicalAndImpl logicalAnd = new LogicalAndImpl();
    return logicalAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOr createLogicalOr()
  {
    LogicalOrImpl logicalOr = new LogicalOrImpl();
    return logicalOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inequality createInequality()
  {
    InequalityImpl inequality = new InequalityImpl();
    return inequality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThanOrEqual createLessThanOrEqual()
  {
    LessThanOrEqualImpl lessThanOrEqual = new LessThanOrEqualImpl();
    return lessThanOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThan createLessThan()
  {
    LessThanImpl lessThan = new LessThanImpl();
    return lessThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThanOrEqual createGreaterThanOrEqual()
  {
    GreaterThanOrEqualImpl greaterThanOrEqual = new GreaterThanOrEqualImpl();
    return greaterThanOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThan createGreaterThan()
  {
    GreaterThanImpl greaterThan = new GreaterThanImpl();
    return greaterThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subtraction createSubtraction()
  {
    SubtractionImpl subtraction = new SubtractionImpl();
    return subtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Division createDivision()
  {
    DivisionImpl division = new DivisionImpl();
    return division;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Remainder createRemainder()
  {
    RemainderImpl remainder = new RemainderImpl();
    return remainder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exponentiation createExponentiation()
  {
    ExponentiationImpl exponentiation = new ExponentiationImpl();
    return exponentiation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conversion createConversion()
  {
    ConversionImpl conversion = new ConversionImpl();
    return conversion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryNegation createUnaryNegation()
  {
    UnaryNegationImpl unaryNegation = new UnaryNegationImpl();
    return unaryNegation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalNot createLogicalNot()
  {
    LogicalNotImpl logicalNot = new LogicalNotImpl();
    return logicalNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Application createApplication()
  {
    ApplicationImpl application = new ApplicationImpl();
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HalePackage getHalePackage()
  {
    return (HalePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HalePackage getPackage()
  {
    return HalePackage.eINSTANCE;
  }

} //HaleFactoryImpl
