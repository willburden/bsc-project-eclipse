/**
 * generated by Xtext 2.34.0
 */
package willburden.hale.hale.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import willburden.hale.hale.Block;
import willburden.hale.hale.Hale;
import willburden.hale.hale.HalePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Hale</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link willburden.hale.hale.impl.HaleImpl#getMainBlock <em>Main Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HaleImpl extends MinimalEObjectImpl.Container implements Hale
{
  /**
   * The cached value of the '{@link #getMainBlock() <em>Main Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainBlock()
   * @generated
   * @ordered
   */
  protected Block mainBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HaleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HalePackage.Literals.HALE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block getMainBlock()
  {
    return mainBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainBlock(Block newMainBlock, NotificationChain msgs)
  {
    Block oldMainBlock = mainBlock;
    mainBlock = newMainBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HalePackage.HALE__MAIN_BLOCK, oldMainBlock, newMainBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainBlock(Block newMainBlock)
  {
    if (newMainBlock != mainBlock)
    {
      NotificationChain msgs = null;
      if (mainBlock != null)
        msgs = ((InternalEObject)mainBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HalePackage.HALE__MAIN_BLOCK, null, msgs);
      if (newMainBlock != null)
        msgs = ((InternalEObject)newMainBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HalePackage.HALE__MAIN_BLOCK, null, msgs);
      msgs = basicSetMainBlock(newMainBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HalePackage.HALE__MAIN_BLOCK, newMainBlock, newMainBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HalePackage.HALE__MAIN_BLOCK:
        return basicSetMainBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HalePackage.HALE__MAIN_BLOCK:
        return getMainBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HalePackage.HALE__MAIN_BLOCK:
        setMainBlock((Block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HalePackage.HALE__MAIN_BLOCK:
        setMainBlock((Block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HalePackage.HALE__MAIN_BLOCK:
        return mainBlock != null;
    }
    return super.eIsSet(featureID);
  }

} //HaleImpl
