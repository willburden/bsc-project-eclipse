/*
 * generated by Xtext 2.34.0
 */
package willburden.hale.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import willburden.hale.services.HaleGrammarAccess;

@SuppressWarnings("all")
public class HaleSyntacticSequencer extends AbstractSyntacticSequencer {

	protected HaleGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Block_SemicolonKeyword_1_1_a;
	protected AbstractElementAlias match_Expression0_LeftParenthesisKeyword_3_0_a;
	protected AbstractElementAlias match_Expression0_LeftParenthesisKeyword_3_0_p;
	protected AbstractElementAlias match_Expression1_CommaKeyword_1_2_2_q;
	protected AbstractElementAlias match_FunctionType_CommaKeyword_0_3_2_q;
	protected AbstractElementAlias match_Function_CommaKeyword_4_2_q;
	protected AbstractElementAlias match_PrimaryType_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_PrimaryType_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (HaleGrammarAccess) access;
		match_Block_SemicolonKeyword_1_1_a = new TokenAlias(true, true, grammarAccess.getBlockAccess().getSemicolonKeyword_1_1());
		match_Expression0_LeftParenthesisKeyword_3_0_a = new TokenAlias(true, true, grammarAccess.getExpression0Access().getLeftParenthesisKeyword_3_0());
		match_Expression0_LeftParenthesisKeyword_3_0_p = new TokenAlias(true, false, grammarAccess.getExpression0Access().getLeftParenthesisKeyword_3_0());
		match_Expression1_CommaKeyword_1_2_2_q = new TokenAlias(false, true, grammarAccess.getExpression1Access().getCommaKeyword_1_2_2());
		match_FunctionType_CommaKeyword_0_3_2_q = new TokenAlias(false, true, grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_2());
		match_Function_CommaKeyword_4_2_q = new TokenAlias(false, true, grammarAccess.getFunctionAccess().getCommaKeyword_4_2());
		match_PrimaryType_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_1_0());
		match_PrimaryType_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Block_SemicolonKeyword_1_1_a.equals(syntax))
				emit_Block_SemicolonKeyword_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression0_LeftParenthesisKeyword_3_0_a.equals(syntax))
				emit_Expression0_LeftParenthesisKeyword_3_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression0_LeftParenthesisKeyword_3_0_p.equals(syntax))
				emit_Expression0_LeftParenthesisKeyword_3_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression1_CommaKeyword_1_2_2_q.equals(syntax))
				emit_Expression1_CommaKeyword_1_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionType_CommaKeyword_0_3_2_q.equals(syntax))
				emit_FunctionType_CommaKeyword_0_3_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Function_CommaKeyword_4_2_q.equals(syntax))
				emit_Function_CommaKeyword_4_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryType_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_PrimaryType_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryType_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_PrimaryType_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '{' (ambiguity) '}' (rule start)
	 *     (rule start) '{' (ambiguity) statements+=Statement
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) statements+=Statement
	 *     statements+=Statement (ambiguity) '}' (rule end)
	 *     statements+=Statement (ambiguity) (rule end)
	 *     statements+=Statement (ambiguity) statements+=Statement
	 
	 * </pre>
	 */
	protected void emit_Block_SemicolonKeyword_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' inner=Expression2
	 *     (rule start) (ambiguity) 'input' ';' (rule start)
	 *     (rule start) (ambiguity) 'input' (rule start)
	 *     (rule start) (ambiguity) 'not' inner=Expression2
	 *     (rule start) (ambiguity) 'void' ';' (rule start)
	 *     (rule start) (ambiguity) 'void' (rule start)
	 *     (rule start) (ambiguity) binding=[Binding|ID]
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=DOUBLE
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {Addition.left=}
	 *     (rule start) (ambiguity) {Application.expression=}
	 *     (rule start) (ambiguity) {Concatenation.left=}
	 *     (rule start) (ambiguity) {Conversion.left=}
	 *     (rule start) (ambiguity) {Division.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Exponentiation.left=}
	 *     (rule start) (ambiguity) {GreaterThan.left=}
	 *     (rule start) (ambiguity) {GreaterThanOrEqual.left=}
	 *     (rule start) (ambiguity) {Inequality.left=}
	 *     (rule start) (ambiguity) {LessThan.left=}
	 *     (rule start) (ambiguity) {LessThanOrEqual.left=}
	 *     (rule start) (ambiguity) {LogicalAnd.left=}
	 *     (rule start) (ambiguity) {LogicalOr.left=}
	 *     (rule start) (ambiguity) {Multiplication.left=}
	 *     (rule start) (ambiguity) {Remainder.left=}
	 *     (rule start) (ambiguity) {Subtraction.left=}
	 
	 * </pre>
	 */
	protected void emit_Expression0_LeftParenthesisKeyword_3_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' inner=Expression2
	 *     (rule start) (ambiguity) 'not' inner=Expression2
	 *     (rule start) (ambiguity) {Addition.left=}
	 *     (rule start) (ambiguity) {Application.expression=}
	 *     (rule start) (ambiguity) {Concatenation.left=}
	 *     (rule start) (ambiguity) {Conversion.left=}
	 *     (rule start) (ambiguity) {Division.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Exponentiation.left=}
	 *     (rule start) (ambiguity) {GreaterThan.left=}
	 *     (rule start) (ambiguity) {GreaterThanOrEqual.left=}
	 *     (rule start) (ambiguity) {Inequality.left=}
	 *     (rule start) (ambiguity) {LessThan.left=}
	 *     (rule start) (ambiguity) {LessThanOrEqual.left=}
	 *     (rule start) (ambiguity) {LogicalAnd.left=}
	 *     (rule start) (ambiguity) {LogicalOr.left=}
	 *     (rule start) (ambiguity) {Multiplication.left=}
	 *     (rule start) (ambiguity) {Remainder.left=}
	 *     (rule start) (ambiguity) {Subtraction.left=}
	 
	 * </pre>
	 */
	protected void emit_Expression0_LeftParenthesisKeyword_3_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments+=Expression (ambiguity) ')' ')' (rule end)
	 *     arguments+=Expression (ambiguity) ')' ';' (rule end)
	 *     arguments+=Expression (ambiguity) ')' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Expression1_CommaKeyword_1_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     paramTypes+=Type (ambiguity) ')' ')' (rule end)
	 *     paramTypes+=Type (ambiguity) ')' (rule end)
	 *     paramTypes+=Type (ambiguity) ')' returnType=TypeAnnotation
	 
	 * </pre>
	 */
	protected void emit_FunctionType_CommaKeyword_0_3_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter (ambiguity) ')' body=BracedBlock
	 *     parameters+=Parameter (ambiguity) ')' returnType=TypeAnnotation
	 
	 * </pre>
	 */
	protected void emit_Function_CommaKeyword_4_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ':' (ambiguity) 'Function' '(' ')' (rule start)
	 *     (rule start) ':' (ambiguity) 'Function' '(' ')' returnType=TypeAnnotation
	 *     (rule start) ':' (ambiguity) 'Function' '(' paramTypes+=Type
	 *     (rule start) ':' (ambiguity) type=PRIMITIVE_TYPE
	 *     (rule start) ':' (ambiguity) {EitherType.left=}
	 *     (rule start) (ambiguity) 'Function' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'Function' '(' ')' returnType=TypeAnnotation
	 *     (rule start) (ambiguity) 'Function' '(' paramTypes+=Type
	 *     (rule start) (ambiguity) type=PRIMITIVE_TYPE
	 *     (rule start) (ambiguity) {EitherType.left=}
	 
	 * </pre>
	 */
	protected void emit_PrimaryType_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'Function' '(' ')' ')' (rule start)
	 *     (rule start) (ambiguity) 'Function' '(' ')' returnType=TypeAnnotation
	 *     (rule start) (ambiguity) 'Function' '(' paramTypes+=Type
	 *     (rule start) (ambiguity) {EitherType.left=}
	 
	 * </pre>
	 */
	protected void emit_PrimaryType_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
