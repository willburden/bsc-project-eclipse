/*
 * generated by Xtext 2.34.0
 */
grammar InternalHale;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package willburden.hale.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package willburden.hale.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import willburden.hale.services.HaleGrammarAccess;

}

@parser::members {

 	private HaleGrammarAccess grammarAccess;

    public InternalHaleParser(TokenStream input, HaleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Hale";
   	}

   	@Override
   	protected HaleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleHale
entryRuleHale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHaleRule()); }
	iv_ruleHale=ruleHale
	{ $current=$iv_ruleHale.current; }
	EOF;

// Rule Hale
ruleHale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHaleAccess().getHaleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHaleAccess().getMainBlockBlockParserRuleCall_1_0());
				}
				lv_mainBlock_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHaleRule());
					}
					set(
						$current,
						"mainBlock",
						lv_mainBlock_1_0,
						"willburden.hale.Hale.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0());
					}
					lv_statements_1_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_0,
							"willburden.hale.Hale.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getSemicolonKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBracedBlockParserRuleCall_0());
		}
		this_BracedBlock_0=ruleBracedBlock
		{
			$current = $this_BracedBlock_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFunctionParserRuleCall_1());
		}
		this_Function_1=ruleFunction
		{
			$current = $this_Function_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfParserRuleCall_2());
		}
		this_If_2=ruleIf
		{
			$current = $this_If_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileParserRuleCall_3());
		}
		this_While_3=ruleWhile
		{
			$current = $this_While_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getPrintParserRuleCall_4_0_0());
				}
				this_Print_4=rulePrint
				{
					$current = $this_Print_4.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getStatementAccess().getLetBindingParserRuleCall_4_0_1());
				}
				this_LetBinding_5=ruleLetBinding
				{
					$current = $this_LetBinding_5.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_4_0_2());
				}
				this_Assignment_6=ruleAssignment
				{
					$current = $this_Assignment_6.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getStatementAccess().getBreakParserRuleCall_4_0_3());
				}
				this_Break_7=ruleBreak
				{
					$current = $this_Break_7.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getStatementAccess().getReturnParserRuleCall_4_0_4());
				}
				this_Return_8=ruleReturn
				{
					$current = $this_Return_8.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getStatementAccess().getThrowParserRuleCall_4_0_5());
				}
				this_Throw_9=ruleThrow
				{
					$current = $this_Throw_9.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4_0_6());
				}
				this_Expression_10=ruleExpression
				{
					$current = $this_Expression_10.current;
					afterParserOrEnumRuleCall();
				}
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getSemicolonKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleBracedBlock
entryRuleBracedBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBracedBlockRule()); }
	iv_ruleBracedBlock=ruleBracedBlock
	{ $current=$iv_ruleBracedBlock.current; }
	EOF;

// Rule BracedBlock
ruleBracedBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBracedBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBracedBlockAccess().getBlockParserRuleCall_1());
		}
		this_Block_1=ruleBlock
		{
			$current = $this_Block_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getBracedBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getExpression10ParserRuleCall());
	}
	this_Expression10_0=ruleExpression10
	{
		$current = $this_Expression10_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression10
entryRuleExpression10 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression10Rule()); }
	iv_ruleExpression10=ruleExpression10
	{ $current=$iv_ruleExpression10.current; }
	EOF;

// Rule Expression10
ruleExpression10 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression10Access().getExpression9ParserRuleCall_0());
		}
		this_Expression9_0=ruleExpression9
		{
			$current = $this_Expression9_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression10Access().getConcatenationLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression10Access().getFullStopKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression10Access().getRightExpression9ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression9
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression10Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"willburden.hale.Hale.Expression9");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression9
entryRuleExpression9 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression9Rule()); }
	iv_ruleExpression9=ruleExpression9
	{ $current=$iv_ruleExpression9.current; }
	EOF;

// Rule Expression9
ruleExpression9 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression9Access().getExpression8ParserRuleCall_0());
		}
		this_Expression8_0=ruleExpression8
		{
			$current = $this_Expression8_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression9Access().getLogicalAndLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='and'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpression9Access().getAndKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression9Access().getRightExpression8ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpression8
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression9Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"willburden.hale.Hale.Expression8");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression9Access().getLogicalOrLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='or'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpression9Access().getOrKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression9Access().getRightExpression8ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpression8
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression9Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"willburden.hale.Hale.Expression8");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression8
entryRuleExpression8 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression8Rule()); }
	iv_ruleExpression8=ruleExpression8
	{ $current=$iv_ruleExpression8.current; }
	EOF;

// Rule Expression8
ruleExpression8 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression8Access().getExpression7ParserRuleCall_0());
		}
		this_Expression7_0=ruleExpression7
		{
			$current = $this_Expression7_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression8Access().getEqualityLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='=='
				{
					newLeafNode(otherlv_2, grammarAccess.getExpression8Access().getEqualsSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression8Access().getRightExpression7ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpression7
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression8Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"willburden.hale.Hale.Expression7");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression8Access().getInequalityLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='!='
				{
					newLeafNode(otherlv_5, grammarAccess.getExpression8Access().getExclamationMarkEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression8Access().getRightExpression7ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpression7
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression8Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"willburden.hale.Hale.Expression7");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression7
entryRuleExpression7 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression7Rule()); }
	iv_ruleExpression7=ruleExpression7
	{ $current=$iv_ruleExpression7.current; }
	EOF;

// Rule Expression7
ruleExpression7 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression7Access().getExpression6ParserRuleCall_0());
		}
		this_Expression6_0=ruleExpression6
		{
			$current = $this_Expression6_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression7Access().getLessThanOrEqualLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='<='
				{
					newLeafNode(otherlv_2, grammarAccess.getExpression7Access().getLessThanSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpression6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression7Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"willburden.hale.Hale.Expression6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression7Access().getLessThanLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='<'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpression7Access().getLessThanSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpression6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression7Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"willburden.hale.Hale.Expression6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression7Access().getGreaterThanOrEqualLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='>='
				{
					newLeafNode(otherlv_8, grammarAccess.getExpression7Access().getGreaterThanSignEqualsSignKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpression6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression7Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"willburden.hale.Hale.Expression6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression7Access().getGreaterThanLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11='>'
				{
					newLeafNode(otherlv_11, grammarAccess.getExpression7Access().getGreaterThanSignKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleExpression6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression7Rule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"willburden.hale.Hale.Expression6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression6
entryRuleExpression6 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression6Rule()); }
	iv_ruleExpression6=ruleExpression6
	{ $current=$iv_ruleExpression6.current; }
	EOF;

// Rule Expression6
ruleExpression6 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression6Access().getExpression5ParserRuleCall_0());
		}
		this_Expression5_0=ruleExpression5
		{
			$current = $this_Expression5_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression6Access().getAdditionLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='+'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpression6Access().getPlusSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression6Access().getRightExpression5ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpression5
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression6Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"willburden.hale.Hale.Expression5");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression6Access().getSubtractionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='-'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpression6Access().getHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression6Access().getRightExpression5ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpression5
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression6Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"willburden.hale.Hale.Expression5");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression5
entryRuleExpression5 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression5Rule()); }
	iv_ruleExpression5=ruleExpression5
	{ $current=$iv_ruleExpression5.current; }
	EOF;

// Rule Expression5
ruleExpression5 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression5Access().getExpression4ParserRuleCall_0());
		}
		this_Expression4_0=ruleExpression4
		{
			$current = $this_Expression4_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression5Access().getMultiplicationLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpression5Access().getAsteriskKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpression4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression5Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"willburden.hale.Hale.Expression4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression5Access().getDivisionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='/'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpression5Access().getSolidusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpression4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression5Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"willburden.hale.Hale.Expression4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpression5Access().getRemainderLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='%'
				{
					newLeafNode(otherlv_8, grammarAccess.getExpression5Access().getPercentSignKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpression4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression5Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"willburden.hale.Hale.Expression4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression4
entryRuleExpression4 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression4Rule()); }
	iv_ruleExpression4=ruleExpression4
	{ $current=$iv_ruleExpression4.current; }
	EOF;

// Rule Expression4
ruleExpression4 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression4Access().getExpression3ParserRuleCall_0());
		}
		this_Expression3_0=ruleExpression3
		{
			$current = $this_Expression3_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression4Access().getExponentiationLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='**'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression4Access().getAsteriskAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression4Access().getRightExpression3ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression3
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression4Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"willburden.hale.Hale.Expression3");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression3
entryRuleExpression3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression3Rule()); }
	iv_ruleExpression3=ruleExpression3
	{ $current=$iv_ruleExpression3.current; }
	EOF;

// Rule Expression3
ruleExpression3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression3Access().getExpression2ParserRuleCall_0());
		}
		this_Expression2_0=ruleExpression2
		{
			$current = $this_Expression2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression3Access().getConversionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='as'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression3Access().getAsKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression3Access().getRightTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression3Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"willburden.hale.Hale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression2
entryRuleExpression2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression2Rule()); }
	iv_ruleExpression2=ruleExpression2
	{ $current=$iv_ruleExpression2.current; }
	EOF;

// Rule Expression2
ruleExpression2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpression2Access().getUnaryNegationAction_0_0(),
						$current);
				}
			)
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpression2Access().getHyphenMinusKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression2Access().getInnerExpression2ParserRuleCall_0_2_0());
					}
					lv_inner_2_0=ruleExpression2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression2Rule());
						}
						set(
							$current,
							"inner",
							lv_inner_2_0,
							"willburden.hale.Hale.Expression2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpression2Access().getLogicalNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='not'
			{
				newLeafNode(otherlv_4, grammarAccess.getExpression2Access().getNotKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression2Access().getInnerExpression2ParserRuleCall_1_2_0());
					}
					lv_inner_5_0=ruleExpression2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression2Rule());
						}
						set(
							$current,
							"inner",
							lv_inner_5_0,
							"willburden.hale.Hale.Expression2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpression2Access().getExpression1ParserRuleCall_2());
		}
		this_Expression1_6=ruleExpression1
		{
			$current = $this_Expression1_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression1
entryRuleExpression1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression1Rule()); }
	iv_ruleExpression1=ruleExpression1
	{ $current=$iv_ruleExpression1.current; }
	EOF;

// Rule Expression1
ruleExpression1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression1Access().getExpression0ParserRuleCall_0());
		}
		this_Expression0_0=ruleExpression0
		{
			$current = $this_Expression0_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression1Access().getApplicationExpressionAction_1_0(),
						$current);
				}
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression1Access().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExpression1Access().getArgumentsExpressionParserRuleCall_1_2_0_0());
						}
						lv_arguments_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpression1Rule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_3_0,
								"willburden.hale.Hale.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getExpression1Access().getCommaKeyword_1_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getExpression1Access().getArgumentsExpressionParserRuleCall_1_2_1_1_0());
							}
							lv_arguments_5_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpression1Rule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_5_0,
									"willburden.hale.Hale.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getExpression1Access().getCommaKeyword_1_2_2());
					}
				)?
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getExpression1Access().getRightParenthesisKeyword_1_3());
			}
		)*
	)
;

// Entry rule entryRuleExpression0
entryRuleExpression0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression0Rule()); }
	iv_ruleExpression0=ruleExpression0
	{ $current=$iv_ruleExpression0.current; }
	EOF;

// Rule Expression0
ruleExpression0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression0Access().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpression0Access().getInputParserRuleCall_1());
		}
		this_Input_1=ruleInput
		{
			$current = $this_Input_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpression0Access().getBindingReferenceParserRuleCall_2());
		}
		this_BindingReference_2=ruleBindingReference
		{
			$current = $this_BindingReference_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getExpression0Access().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getExpression0Access().getExpressionParserRuleCall_3_1());
			}
			this_Expression_4=ruleExpression
			{
				$current = $this_Expression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpression0Access().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getVoidLiteralParserRuleCall_0());
		}
		this_VoidLiteral_0=ruleVoidLiteral
		{
			$current = $this_VoidLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1());
		}
		this_BooleanLiteral_1=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2());
		}
		this_NumberLiteral_2=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3());
		}
		this_StringLiteral_3=ruleStringLiteral
		{
			$current = $this_StringLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVoidLiteral
entryRuleVoidLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoidLiteralRule()); }
	iv_ruleVoidLiteral=ruleVoidLiteral
	{ $current=$iv_ruleVoidLiteral.current; }
	EOF;

// Rule VoidLiteral
ruleVoidLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVoidLiteralAccess().getVoidLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='void'
		{
			newLeafNode(otherlv_1, grammarAccess.getVoidLiteralAccess().getVoidKeyword_1());
		}
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOLEAN
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"willburden.hale.Hale.BOOLEAN");
			}
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DOUBLE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberLiteralAccess().getValueDOUBLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"willburden.hale.Hale.DOUBLE");
			}
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"willburden.hale.Hale.STRING");
			}
		)
	)
;

// Entry rule entryRuleTypeAnnotation
entryRuleTypeAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeAnnotationRule()); }
	iv_ruleTypeAnnotation=ruleTypeAnnotation
	{ $current=$iv_ruleTypeAnnotation.current; }
	EOF;

// Rule TypeAnnotation
ruleTypeAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAnnotationAccess().getColonKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getTypeAnnotationAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getFunctionTypeParserRuleCall());
	}
	this_FunctionType_0=ruleFunctionType
	{
		$current = $this_FunctionType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunctionType
entryRuleFunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_ruleFunctionType=ruleFunctionType
	{ $current=$iv_ruleFunctionType.current; }
	EOF;

// Rule FunctionType
ruleFunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunctionTypeAccess().getFunctionTypeAction_0_0(),
						$current);
				}
			)
			otherlv_1='Function'
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0_1());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionTypeAccess().getParamTypesTypeParserRuleCall_0_3_0_0());
						}
						lv_paramTypes_3_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
							}
							add(
								$current,
								"paramTypes",
								lv_paramTypes_3_0,
								"willburden.hale.Hale.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getFunctionTypeAccess().getParamTypesTypeParserRuleCall_0_3_1_1_0());
							}
							lv_paramTypes_5_0=ruleType
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
								}
								add(
									$current,
									"paramTypes",
									lv_paramTypes_5_0,
									"willburden.hale.Hale.Type");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_2());
					}
				)?
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getFunctionTypeAccess().getRightParenthesisKeyword_0_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionTypeAccess().getReturnTypeTypeAnnotationParserRuleCall_0_5_0());
					}
					lv_returnType_8_0=ruleTypeAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_8_0,
							"willburden.hale.Hale.TypeAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getFunctionTypeAccess().getEitherTypeParserRuleCall_1());
		}
		this_EitherType_9=ruleEitherType
		{
			$current = $this_EitherType_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEitherType
entryRuleEitherType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEitherTypeRule()); }
	iv_ruleEitherType=ruleEitherType
	{ $current=$iv_ruleEitherType.current; }
	EOF;

// Rule EitherType
ruleEitherType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEitherTypeAccess().getPrimaryTypeParserRuleCall_0());
		}
		this_PrimaryType_0=rulePrimaryType
		{
			$current = $this_PrimaryType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEitherTypeAccess().getEitherTypeLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='?'
			{
				newLeafNode(otherlv_2, grammarAccess.getEitherTypeAccess().getQuestionMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEitherTypeAccess().getRightPrimaryTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEitherTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"willburden.hale.Hale.PrimaryType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryType
entryRulePrimaryType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryTypeRule()); }
	iv_rulePrimaryType=rulePrimaryType
	{ $current=$iv_rulePrimaryType.current; }
	EOF;

// Rule PrimaryType
rulePrimaryType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryTypeAccess().getPrimitiveTypeParserRuleCall_0());
		}
		this_PrimitiveType_0=rulePrimitiveType
		{
			$current = $this_PrimitiveType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryTypeAccess().getTypeParserRuleCall_1_1());
			}
			this_Type_2=ruleType
			{
				$current = $this_Type_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryTypeAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	iv_rulePrimitiveType=rulePrimitiveType
	{ $current=$iv_rulePrimitiveType.current; }
	EOF;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypeAction_0(),
					$current);
			}
		)
		(
			(
				lv_type_1_0=RULE_PRIMITIVE_TYPE
				{
					newLeafNode(lv_type_1_0, grammarAccess.getPrimitiveTypeAccess().getTypePRIMITIVE_TYPETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveTypeRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"willburden.hale.Hale.PRIMITIVE_TYPE");
				}
			)
		)
	)
;

// Entry rule entryRuleLetBinding
entryRuleLetBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetBindingRule()); }
	iv_ruleLetBinding=ruleLetBinding
	{ $current=$iv_ruleLetBinding.current; }
	EOF;

// Rule LetBinding
ruleLetBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLetBindingAccess().getLetBindingAction_0(),
					$current);
			}
		)
		otherlv_1='let'
		{
			newLeafNode(otherlv_1, grammarAccess.getLetBindingAccess().getLetKeyword_1());
		}
		(
			(
				lv_mutable_2_0='mut'
				{
					newLeafNode(lv_mutable_2_0, grammarAccess.getLetBindingAccess().getMutableMutKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLetBindingRule());
					}
					setWithLastConsumed($current, "mutable", lv_mutable_2_0 != null, "mut");
				}
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getLetBindingAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLetBindingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"willburden.hale.Hale.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLetBindingAccess().getTypeTypeAnnotationParserRuleCall_4_0());
				}
				lv_type_4_0=ruleTypeAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetBindingRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"willburden.hale.Hale.TypeAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getLetBindingAccess().getEqualsSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetBindingAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetBindingRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBindingReference
entryRuleBindingReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingReferenceRule()); }
	iv_ruleBindingReference=ruleBindingReference
	{ $current=$iv_ruleBindingReference.current; }
	EOF;

// Rule BindingReference
ruleBindingReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBindingReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getBindingReferenceAccess().getBindingBindingCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getBindingBindingCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputAccess().getInputAction_0(),
					$current);
			}
		)
		otherlv_1='input'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getInputKeyword_1());
		}
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getIfAccess().getIfLetParserRuleCall_1_0());
			}
			this_IfLet_1=ruleIfLet
			{
				$current = $this_IfLet_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getIfAccess().getIfConditionsParserRuleCall_1_1());
			}
			this_IfConditions_2=ruleIfConditions
			{
				$current = $this_IfConditions_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIfLet
entryRuleIfLet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfLetRule()); }
	iv_ruleIfLet=ruleIfLet
	{ $current=$iv_ruleIfLet.current; }
	EOF;

// Rule IfLet
ruleIfLet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfLetAccess().getIfLetAction_0(),
					$current);
			}
		)
		otherlv_1='let'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfLetAccess().getLetKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getIfLetAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIfLetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"willburden.hale.Hale.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfLetAccess().getTypeTypeAnnotationParserRuleCall_3_0());
				}
				lv_type_3_0=ruleTypeAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfLetRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"willburden.hale.Hale.TypeAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getIfLetAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfLetAccess().getExpressionExpressionParserRuleCall_5_0());
				}
				lv_expression_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfLetRule());
					}
					set(
						$current,
						"expression",
						lv_expression_5_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfLetAccess().getIfBlockBracedBlockParserRuleCall_6_0());
				}
				lv_ifBlock_6_0=ruleBracedBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfLetRule());
					}
					set(
						$current,
						"ifBlock",
						lv_ifBlock_6_0,
						"willburden.hale.Hale.BracedBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='else'
			{
				newLeafNode(otherlv_7, grammarAccess.getIfLetAccess().getElseKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfLetAccess().getElseLetElseLetParserRuleCall_7_1_0());
					}
					lv_elseLet_8_0=ruleElseLet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfLetRule());
						}
						set(
							$current,
							"elseLet",
							lv_elseLet_8_0,
							"willburden.hale.Hale.ElseLet");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleElseLet
entryRuleElseLet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseLetRule()); }
	iv_ruleElseLet=ruleElseLet
	{ $current=$iv_ruleElseLet.current; }
	EOF;

// Rule ElseLet
ruleElseLet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseLetAccess().getElseLetAction_0(),
					$current);
			}
		)
		(
			otherlv_1='let'
			{
				newLeafNode(otherlv_1, grammarAccess.getElseLetAccess().getLetKeyword_1_0());
			}
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getElseLetAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElseLetRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"willburden.hale.Hale.ID");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getElseLetAccess().getTypeTypeAnnotationParserRuleCall_1_2_0());
					}
					lv_type_3_0=ruleTypeAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElseLetRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"willburden.hale.Hale.TypeAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getElseLetAccess().getElseBlockBracedBlockParserRuleCall_2_0());
				}
				lv_elseBlock_4_0=ruleBracedBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseLetRule());
					}
					set(
						$current,
						"elseBlock",
						lv_elseBlock_4_0,
						"willburden.hale.Hale.BracedBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfConditions
entryRuleIfConditions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfConditionsRule()); }
	iv_ruleIfConditions=ruleIfConditions
	{ $current=$iv_ruleIfConditions.current; }
	EOF;

// Rule IfConditions
ruleIfConditions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfConditionsAccess().getIfConditionsAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfConditionsAccess().getConditionsExpressionParserRuleCall_1_0());
				}
				lv_conditions_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfConditionsRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_1_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfConditionsAccess().getIfBlocksBracedBlockParserRuleCall_2_0());
				}
				lv_ifBlocks_2_0=ruleBracedBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfConditionsRule());
					}
					add(
						$current,
						"ifBlocks",
						lv_ifBlocks_2_0,
						"willburden.hale.Hale.BracedBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='elseif'
			{
				newLeafNode(otherlv_3, grammarAccess.getIfConditionsAccess().getElseifKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfConditionsAccess().getConditionsExpressionParserRuleCall_3_1_0());
					}
					lv_conditions_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfConditionsRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_4_0,
							"willburden.hale.Hale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfConditionsAccess().getIfBlocksBracedBlockParserRuleCall_3_2_0());
					}
					lv_ifBlocks_5_0=ruleBracedBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfConditionsRule());
						}
						add(
							$current,
							"ifBlocks",
							lv_ifBlocks_5_0,
							"willburden.hale.Hale.BracedBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_6='else'
			{
				newLeafNode(otherlv_6, grammarAccess.getIfConditionsAccess().getElseKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfConditionsAccess().getElseBlockBracedBlockParserRuleCall_4_1_0());
					}
					lv_elseBlock_7_0=ruleBracedBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfConditionsRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_7_0,
							"willburden.hale.Hale.BracedBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBlockBracedBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleBracedBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"willburden.hale.Hale.BracedBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBreak
entryRuleBreak returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBreakRule()); }
	iv_ruleBreak=ruleBreak
	{ $current=$iv_ruleBreak.current; }
	EOF;

// Rule Break
ruleBreak returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBreakAccess().getBreakAction_0(),
					$current);
			}
		)
		otherlv_1='break'
		{
			newLeafNode(otherlv_1, grammarAccess.getBreakAccess().getBreakKeyword_1());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionAccess().getFunctionAction_0(),
					$current);
			}
		)
		otherlv_1='function'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getFunctionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"willburden.hale.Hale.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_4_0_0());
					}
					lv_parameters_4_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"willburden.hale.Hale.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_4_1_1_0());
						}
						lv_parameters_6_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_6_0,
								"willburden.hale.Hale.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getCommaKeyword_4_2());
				}
			)?
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getReturnTypeTypeAnnotationParserRuleCall_6_0());
				}
				lv_returnType_9_0=ruleTypeAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_9_0,
						"willburden.hale.Hale.TypeAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getBodyBracedBlockParserRuleCall_7_0());
				}
				lv_body_10_0=ruleBracedBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"willburden.hale.Hale.BracedBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getParameterAction_0(),
					$current);
			}
		)
		(
			(
				lv_mutable_1_0='mut'
				{
					newLeafNode(lv_mutable_1_0, grammarAccess.getParameterAccess().getMutableMutKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed($current, "mutable", lv_mutable_1_0 != null, "mut");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"willburden.hale.Hale.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeAnnotationParserRuleCall_3_0());
				}
				lv_type_3_0=ruleTypeAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"willburden.hale.Hale.TypeAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnAccess().getReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleThrow
entryRuleThrow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThrowRule()); }
	iv_ruleThrow=ruleThrow
	{ $current=$iv_ruleThrow.current; }
	EOF;

// Rule Throw
ruleThrow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getThrowAccess().getThrowAction_0(),
					$current);
			}
		)
		otherlv_1='throw'
		{
			newLeafNode(otherlv_1, grammarAccess.getThrowAccess().getThrowKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getThrowAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThrowRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"willburden.hale.Hale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

RULE_PRIMITIVE_TYPE : ('Void'|'Boolean'|'Number'|'String');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_DOUBLE : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
