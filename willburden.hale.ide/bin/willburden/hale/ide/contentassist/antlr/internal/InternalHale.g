/*
 * generated by Xtext 2.34.0
 */
grammar InternalHale;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package willburden.hale.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package willburden.hale.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import willburden.hale.services.HaleGrammarAccess;

}
@parser::members {
	private HaleGrammarAccess grammarAccess;

	public void setGrammarAccess(HaleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleHale
entryRuleHale
:
{ before(grammarAccess.getHaleRule()); }
	 ruleHale
{ after(grammarAccess.getHaleRule()); } 
	 EOF 
;

// Rule Hale
ruleHale 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHaleAccess().getGroup()); }
		(rule__Hale__Group__0)
		{ after(grammarAccess.getHaleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBracedBlock
entryRuleBracedBlock
:
{ before(grammarAccess.getBracedBlockRule()); }
	 ruleBracedBlock
{ after(grammarAccess.getBracedBlockRule()); } 
	 EOF 
;

// Rule BracedBlock
ruleBracedBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBracedBlockAccess().getGroup()); }
		(rule__BracedBlock__Group__0)
		{ after(grammarAccess.getBracedBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getExpression10ParserRuleCall()); }
		ruleExpression10
		{ after(grammarAccess.getExpressionAccess().getExpression10ParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression10
entryRuleExpression10
:
{ before(grammarAccess.getExpression10Rule()); }
	 ruleExpression10
{ after(grammarAccess.getExpression10Rule()); } 
	 EOF 
;

// Rule Expression10
ruleExpression10 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression10Access().getGroup()); }
		(rule__Expression10__Group__0)
		{ after(grammarAccess.getExpression10Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression9
entryRuleExpression9
:
{ before(grammarAccess.getExpression9Rule()); }
	 ruleExpression9
{ after(grammarAccess.getExpression9Rule()); } 
	 EOF 
;

// Rule Expression9
ruleExpression9 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression9Access().getGroup()); }
		(rule__Expression9__Group__0)
		{ after(grammarAccess.getExpression9Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression8
entryRuleExpression8
:
{ before(grammarAccess.getExpression8Rule()); }
	 ruleExpression8
{ after(grammarAccess.getExpression8Rule()); } 
	 EOF 
;

// Rule Expression8
ruleExpression8 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression8Access().getGroup()); }
		(rule__Expression8__Group__0)
		{ after(grammarAccess.getExpression8Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression7
entryRuleExpression7
:
{ before(grammarAccess.getExpression7Rule()); }
	 ruleExpression7
{ after(grammarAccess.getExpression7Rule()); } 
	 EOF 
;

// Rule Expression7
ruleExpression7 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression7Access().getGroup()); }
		(rule__Expression7__Group__0)
		{ after(grammarAccess.getExpression7Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression6
entryRuleExpression6
:
{ before(grammarAccess.getExpression6Rule()); }
	 ruleExpression6
{ after(grammarAccess.getExpression6Rule()); } 
	 EOF 
;

// Rule Expression6
ruleExpression6 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression6Access().getGroup()); }
		(rule__Expression6__Group__0)
		{ after(grammarAccess.getExpression6Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression5
entryRuleExpression5
:
{ before(grammarAccess.getExpression5Rule()); }
	 ruleExpression5
{ after(grammarAccess.getExpression5Rule()); } 
	 EOF 
;

// Rule Expression5
ruleExpression5 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression5Access().getGroup()); }
		(rule__Expression5__Group__0)
		{ after(grammarAccess.getExpression5Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression4
entryRuleExpression4
:
{ before(grammarAccess.getExpression4Rule()); }
	 ruleExpression4
{ after(grammarAccess.getExpression4Rule()); } 
	 EOF 
;

// Rule Expression4
ruleExpression4 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression4Access().getGroup()); }
		(rule__Expression4__Group__0)
		{ after(grammarAccess.getExpression4Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression3
entryRuleExpression3
:
{ before(grammarAccess.getExpression3Rule()); }
	 ruleExpression3
{ after(grammarAccess.getExpression3Rule()); } 
	 EOF 
;

// Rule Expression3
ruleExpression3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression3Access().getGroup()); }
		(rule__Expression3__Group__0)
		{ after(grammarAccess.getExpression3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression2
entryRuleExpression2
:
{ before(grammarAccess.getExpression2Rule()); }
	 ruleExpression2
{ after(grammarAccess.getExpression2Rule()); } 
	 EOF 
;

// Rule Expression2
ruleExpression2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression2Access().getAlternatives()); }
		(rule__Expression2__Alternatives)
		{ after(grammarAccess.getExpression2Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression1
entryRuleExpression1
:
{ before(grammarAccess.getExpression1Rule()); }
	 ruleExpression1
{ after(grammarAccess.getExpression1Rule()); } 
	 EOF 
;

// Rule Expression1
ruleExpression1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression1Access().getGroup()); }
		(rule__Expression1__Group__0)
		{ after(grammarAccess.getExpression1Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression0
entryRuleExpression0
:
{ before(grammarAccess.getExpression0Rule()); }
	 ruleExpression0
{ after(grammarAccess.getExpression0Rule()); } 
	 EOF 
;

// Rule Expression0
ruleExpression0 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpression0Access().getAlternatives()); }
		(rule__Expression0__Alternatives)
		{ after(grammarAccess.getExpression0Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVoidLiteral
entryRuleVoidLiteral
:
{ before(grammarAccess.getVoidLiteralRule()); }
	 ruleVoidLiteral
{ after(grammarAccess.getVoidLiteralRule()); } 
	 EOF 
;

// Rule VoidLiteral
ruleVoidLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVoidLiteralAccess().getGroup()); }
		(rule__VoidLiteral__Group__0)
		{ after(grammarAccess.getVoidLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
		(rule__BooleanLiteral__ValueAssignment)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeAnnotation
entryRuleTypeAnnotation
:
{ before(grammarAccess.getTypeAnnotationRule()); }
	 ruleTypeAnnotation
{ after(grammarAccess.getTypeAnnotationRule()); } 
	 EOF 
;

// Rule TypeAnnotation
ruleTypeAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAnnotationAccess().getGroup()); }
		(rule__TypeAnnotation__Group__0)
		{ after(grammarAccess.getTypeAnnotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getFunctionTypeParserRuleCall()); }
		ruleFunctionType
		{ after(grammarAccess.getTypeAccess().getFunctionTypeParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionType
entryRuleFunctionType
:
{ before(grammarAccess.getFunctionTypeRule()); }
	 ruleFunctionType
{ after(grammarAccess.getFunctionTypeRule()); } 
	 EOF 
;

// Rule FunctionType
ruleFunctionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getAlternatives()); }
		(rule__FunctionType__Alternatives)
		{ after(grammarAccess.getFunctionTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEitherType
entryRuleEitherType
:
{ before(grammarAccess.getEitherTypeRule()); }
	 ruleEitherType
{ after(grammarAccess.getEitherTypeRule()); } 
	 EOF 
;

// Rule EitherType
ruleEitherType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEitherTypeAccess().getGroup()); }
		(rule__EitherType__Group__0)
		{ after(grammarAccess.getEitherTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryType
entryRulePrimaryType
:
{ before(grammarAccess.getPrimaryTypeRule()); }
	 rulePrimaryType
{ after(grammarAccess.getPrimaryTypeRule()); } 
	 EOF 
;

// Rule PrimaryType
rulePrimaryType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryTypeAccess().getAlternatives()); }
		(rule__PrimaryType__Alternatives)
		{ after(grammarAccess.getPrimaryTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getGroup()); }
		(rule__PrimitiveType__Group__0)
		{ after(grammarAccess.getPrimitiveTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinding
entryRuleBinding
:
{ before(grammarAccess.getBindingRule()); }
	 ruleBinding
{ after(grammarAccess.getBindingRule()); } 
	 EOF 
;

// Rule Binding
ruleBinding 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBindingAccess().getNameAssignment()); }
		(rule__Binding__NameAssignment)
		{ after(grammarAccess.getBindingAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetBinding
entryRuleLetBinding
:
{ before(grammarAccess.getLetBindingRule()); }
	 ruleLetBinding
{ after(grammarAccess.getLetBindingRule()); } 
	 EOF 
;

// Rule LetBinding
ruleLetBinding 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetBindingAccess().getGroup()); }
		(rule__LetBinding__Group__0)
		{ after(grammarAccess.getLetBindingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBindingReference
entryRuleBindingReference
:
{ before(grammarAccess.getBindingReferenceRule()); }
	 ruleBindingReference
{ after(grammarAccess.getBindingReferenceRule()); } 
	 EOF 
;

// Rule BindingReference
ruleBindingReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBindingReferenceAccess().getBindingAssignment()); }
		(rule__BindingReference__BindingAssignment)
		{ after(grammarAccess.getBindingReferenceAccess().getBindingAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfLet
entryRuleIfLet
:
{ before(grammarAccess.getIfLetRule()); }
	 ruleIfLet
{ after(grammarAccess.getIfLetRule()); } 
	 EOF 
;

// Rule IfLet
ruleIfLet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfLetAccess().getGroup()); }
		(rule__IfLet__Group__0)
		{ after(grammarAccess.getIfLetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseLet
entryRuleElseLet
:
{ before(grammarAccess.getElseLetRule()); }
	 ruleElseLet
{ after(grammarAccess.getElseLetRule()); } 
	 EOF 
;

// Rule ElseLet
ruleElseLet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseLetAccess().getGroup()); }
		(rule__ElseLet__Group__0)
		{ after(grammarAccess.getElseLetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfConditions
entryRuleIfConditions
:
{ before(grammarAccess.getIfConditionsRule()); }
	 ruleIfConditions
{ after(grammarAccess.getIfConditionsRule()); } 
	 EOF 
;

// Rule IfConditions
ruleIfConditions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfConditionsAccess().getGroup()); }
		(rule__IfConditions__Group__0)
		{ after(grammarAccess.getIfConditionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBreak
entryRuleBreak
:
{ before(grammarAccess.getBreakRule()); }
	 ruleBreak
{ after(grammarAccess.getBreakRule()); } 
	 EOF 
;

// Rule Break
ruleBreak 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBreakAccess().getGroup()); }
		(rule__Break__Group__0)
		{ after(grammarAccess.getBreakAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturn
entryRuleReturn
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnAccess().getGroup()); }
		(rule__Return__Group__0)
		{ after(grammarAccess.getReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThrow
entryRuleThrow
:
{ before(grammarAccess.getThrowRule()); }
	 ruleThrow
{ after(grammarAccess.getThrowRule()); } 
	 EOF 
;

// Rule Throw
ruleThrow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThrowAccess().getGroup()); }
		(rule__Throw__Group__0)
		{ after(grammarAccess.getThrowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1_0()); }
		(rule__Block__StatementsAssignment_1_0)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_1_1()); }
		';'
		{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getBracedBlockParserRuleCall_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getStatementAccess().getBracedBlockParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionParserRuleCall_1()); }
		ruleFunction
		{ after(grammarAccess.getStatementAccess().getFunctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfParserRuleCall_2()); }
		ruleIf
		{ after(grammarAccess.getStatementAccess().getIfParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileParserRuleCall_3()); }
		ruleWhile
		{ after(grammarAccess.getStatementAccess().getWhileParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_4()); }
		(rule__Statement__Group_4__0)
		{ after(grammarAccess.getStatementAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrintParserRuleCall_4_0_0()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintParserRuleCall_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLetBindingParserRuleCall_4_0_1()); }
		ruleLetBinding
		{ after(grammarAccess.getStatementAccess().getLetBindingParserRuleCall_4_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_4_0_2()); }
		ruleAssignment
		{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_4_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBreakParserRuleCall_4_0_3()); }
		ruleBreak
		{ after(grammarAccess.getStatementAccess().getBreakParserRuleCall_4_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReturnParserRuleCall_4_0_4()); }
		ruleReturn
		{ after(grammarAccess.getStatementAccess().getReturnParserRuleCall_4_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getThrowParserRuleCall_4_0_5()); }
		ruleThrow
		{ after(grammarAccess.getStatementAccess().getThrowParserRuleCall_4_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4_0_6()); }
		ruleExpression
		{ after(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression9Access().getGroup_1_0()); }
		(rule__Expression9__Group_1_0__0)
		{ after(grammarAccess.getExpression9Access().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression9Access().getGroup_1_1()); }
		(rule__Expression9__Group_1_1__0)
		{ after(grammarAccess.getExpression9Access().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression8Access().getGroup_1_0()); }
		(rule__Expression8__Group_1_0__0)
		{ after(grammarAccess.getExpression8Access().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression8Access().getGroup_1_1()); }
		(rule__Expression8__Group_1_1__0)
		{ after(grammarAccess.getExpression8Access().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression7Access().getGroup_1_0()); }
		(rule__Expression7__Group_1_0__0)
		{ after(grammarAccess.getExpression7Access().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression7Access().getGroup_1_1()); }
		(rule__Expression7__Group_1_1__0)
		{ after(grammarAccess.getExpression7Access().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpression7Access().getGroup_1_2()); }
		(rule__Expression7__Group_1_2__0)
		{ after(grammarAccess.getExpression7Access().getGroup_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpression7Access().getGroup_1_3()); }
		(rule__Expression7__Group_1_3__0)
		{ after(grammarAccess.getExpression7Access().getGroup_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression6Access().getGroup_1_0()); }
		(rule__Expression6__Group_1_0__0)
		{ after(grammarAccess.getExpression6Access().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression6Access().getGroup_1_1()); }
		(rule__Expression6__Group_1_1__0)
		{ after(grammarAccess.getExpression6Access().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression5Access().getGroup_1_0()); }
		(rule__Expression5__Group_1_0__0)
		{ after(grammarAccess.getExpression5Access().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression5Access().getGroup_1_1()); }
		(rule__Expression5__Group_1_1__0)
		{ after(grammarAccess.getExpression5Access().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpression5Access().getGroup_1_2()); }
		(rule__Expression5__Group_1_2__0)
		{ after(grammarAccess.getExpression5Access().getGroup_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression2Access().getGroup_0()); }
		(rule__Expression2__Group_0__0)
		{ after(grammarAccess.getExpression2Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression2Access().getGroup_1()); }
		(rule__Expression2__Group_1__0)
		{ after(grammarAccess.getExpression2Access().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpression2Access().getExpression1ParserRuleCall_2()); }
		ruleExpression1
		{ after(grammarAccess.getExpression2Access().getExpression1ParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression0__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression0Access().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getExpression0Access().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpression0Access().getInputParserRuleCall_1()); }
		ruleInput
		{ after(grammarAccess.getExpression0Access().getInputParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpression0Access().getBindingReferenceParserRuleCall_2()); }
		ruleBindingReference
		{ after(grammarAccess.getExpression0Access().getBindingReferenceParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpression0Access().getGroup_3()); }
		(rule__Expression0__Group_3__0)
		{ after(grammarAccess.getExpression0Access().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getVoidLiteralParserRuleCall_0()); }
		ruleVoidLiteral
		{ after(grammarAccess.getLiteralAccess().getVoidLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2()); }
		ruleNumberLiteral
		{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getGroup_0()); }
		(rule__FunctionType__Group_0__0)
		{ after(grammarAccess.getFunctionTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionTypeAccess().getEitherTypeParserRuleCall_1()); }
		ruleEitherType
		{ after(grammarAccess.getFunctionTypeAccess().getEitherTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
		rulePrimitiveType
		{ after(grammarAccess.getPrimaryTypeAccess().getPrimitiveTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryTypeAccess().getGroup_1()); }
		(rule__PrimaryType__Group_1__0)
		{ after(grammarAccess.getPrimaryTypeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getIfLetParserRuleCall_1_0()); }
		ruleIfLet
		{ after(grammarAccess.getIfAccess().getIfLetParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getIfConditionsParserRuleCall_1_1()); }
		ruleIfConditions
		{ after(grammarAccess.getIfAccess().getIfConditionsParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hale__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hale__Group__0__Impl
	rule__Hale__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hale__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaleAccess().getHaleAction_0()); }
	()
	{ after(grammarAccess.getHaleAccess().getHaleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hale__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hale__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hale__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaleAccess().getMainBlockAssignment_1()); }
	(rule__Hale__MainBlockAssignment_1)
	{ after(grammarAccess.getHaleAccess().getMainBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getAlternatives_1()); }
	(rule__Block__Alternatives_1)*
	{ after(grammarAccess.getBlockAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4__0__Impl
	rule__Statement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAlternatives_4_0()); }
	(rule__Statement__Alternatives_4_0)
	{ after(grammarAccess.getStatementAccess().getAlternatives_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BracedBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracedBlock__Group__0__Impl
	rule__BracedBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracedBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getBracedBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracedBlock__Group__1__Impl
	rule__BracedBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracedBlockAccess().getBlockParserRuleCall_1()); }
	ruleBlock
	{ after(grammarAccess.getBracedBlockAccess().getBlockParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracedBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracedBlockAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getBracedBlockAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression10__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression10__Group__0__Impl
	rule__Expression10__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression10Access().getExpression9ParserRuleCall_0()); }
	ruleExpression9
	{ after(grammarAccess.getExpression10Access().getExpression9ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression10__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression10Access().getGroup_1()); }
	(rule__Expression10__Group_1__0)*
	{ after(grammarAccess.getExpression10Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression10__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression10__Group_1__0__Impl
	rule__Expression10__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression10Access().getConcatenationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpression10Access().getConcatenationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression10__Group_1__1__Impl
	rule__Expression10__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression10Access().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getExpression10Access().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression10__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression10Access().getRightAssignment_1_2()); }
	(rule__Expression10__RightAssignment_1_2)
	{ after(grammarAccess.getExpression10Access().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression9__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group__0__Impl
	rule__Expression9__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getExpression8ParserRuleCall_0()); }
	ruleExpression8
	{ after(grammarAccess.getExpression9Access().getExpression8ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getAlternatives_1()); }
	(rule__Expression9__Alternatives_1)*
	{ after(grammarAccess.getExpression9Access().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression9__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group_1_0__0__Impl
	rule__Expression9__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getLogicalAndLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getExpression9Access().getLogicalAndLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group_1_0__1__Impl
	rule__Expression9__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getAndKeyword_1_0_1()); }
	'and'
	{ after(grammarAccess.getExpression9Access().getAndKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getRightAssignment_1_0_2()); }
	(rule__Expression9__RightAssignment_1_0_2)
	{ after(grammarAccess.getExpression9Access().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression9__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group_1_1__0__Impl
	rule__Expression9__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getLogicalOrLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getExpression9Access().getLogicalOrLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group_1_1__1__Impl
	rule__Expression9__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getOrKeyword_1_1_1()); }
	'or'
	{ after(grammarAccess.getExpression9Access().getOrKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression9__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression9Access().getRightAssignment_1_1_2()); }
	(rule__Expression9__RightAssignment_1_1_2)
	{ after(grammarAccess.getExpression9Access().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression8__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group__0__Impl
	rule__Expression8__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getExpression7ParserRuleCall_0()); }
	ruleExpression7
	{ after(grammarAccess.getExpression8Access().getExpression7ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getAlternatives_1()); }
	(rule__Expression8__Alternatives_1)*
	{ after(grammarAccess.getExpression8Access().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression8__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group_1_0__0__Impl
	rule__Expression8__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getEqualityLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getExpression8Access().getEqualityLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group_1_0__1__Impl
	rule__Expression8__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getEqualsSignEqualsSignKeyword_1_0_1()); }
	'=='
	{ after(grammarAccess.getExpression8Access().getEqualsSignEqualsSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getRightAssignment_1_0_2()); }
	(rule__Expression8__RightAssignment_1_0_2)
	{ after(grammarAccess.getExpression8Access().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression8__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group_1_1__0__Impl
	rule__Expression8__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getInequalityLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getExpression8Access().getInequalityLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group_1_1__1__Impl
	rule__Expression8__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getExclamationMarkEqualsSignKeyword_1_1_1()); }
	'!='
	{ after(grammarAccess.getExpression8Access().getExclamationMarkEqualsSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression8__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression8Access().getRightAssignment_1_1_2()); }
	(rule__Expression8__RightAssignment_1_1_2)
	{ after(grammarAccess.getExpression8Access().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression7__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group__0__Impl
	rule__Expression7__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getExpression6ParserRuleCall_0()); }
	ruleExpression6
	{ after(grammarAccess.getExpression7Access().getExpression6ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getAlternatives_1()); }
	(rule__Expression7__Alternatives_1)*
	{ after(grammarAccess.getExpression7Access().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression7__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_0__0__Impl
	rule__Expression7__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getLessThanOrEqualLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getExpression7Access().getLessThanOrEqualLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_0__1__Impl
	rule__Expression7__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getLessThanSignEqualsSignKeyword_1_0_1()); }
	'<='
	{ after(grammarAccess.getExpression7Access().getLessThanSignEqualsSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getRightAssignment_1_0_2()); }
	(rule__Expression7__RightAssignment_1_0_2)
	{ after(grammarAccess.getExpression7Access().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression7__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_1__0__Impl
	rule__Expression7__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getLessThanLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getExpression7Access().getLessThanLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_1__1__Impl
	rule__Expression7__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getLessThanSignKeyword_1_1_1()); }
	'<'
	{ after(grammarAccess.getExpression7Access().getLessThanSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getRightAssignment_1_1_2()); }
	(rule__Expression7__RightAssignment_1_1_2)
	{ after(grammarAccess.getExpression7Access().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression7__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_2__0__Impl
	rule__Expression7__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getGreaterThanOrEqualLeftAction_1_2_0()); }
	()
	{ after(grammarAccess.getExpression7Access().getGreaterThanOrEqualLeftAction_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_2__1__Impl
	rule__Expression7__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getGreaterThanSignEqualsSignKeyword_1_2_1()); }
	'>='
	{ after(grammarAccess.getExpression7Access().getGreaterThanSignEqualsSignKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getRightAssignment_1_2_2()); }
	(rule__Expression7__RightAssignment_1_2_2)
	{ after(grammarAccess.getExpression7Access().getRightAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression7__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_3__0__Impl
	rule__Expression7__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getGreaterThanLeftAction_1_3_0()); }
	()
	{ after(grammarAccess.getExpression7Access().getGreaterThanLeftAction_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_3__1__Impl
	rule__Expression7__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getGreaterThanSignKeyword_1_3_1()); }
	'>'
	{ after(grammarAccess.getExpression7Access().getGreaterThanSignKeyword_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression7__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__Group_1_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression7Access().getRightAssignment_1_3_2()); }
	(rule__Expression7__RightAssignment_1_3_2)
	{ after(grammarAccess.getExpression7Access().getRightAssignment_1_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression6__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group__0__Impl
	rule__Expression6__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getExpression5ParserRuleCall_0()); }
	ruleExpression5
	{ after(grammarAccess.getExpression6Access().getExpression5ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getAlternatives_1()); }
	(rule__Expression6__Alternatives_1)*
	{ after(grammarAccess.getExpression6Access().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression6__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group_1_0__0__Impl
	rule__Expression6__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getAdditionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getExpression6Access().getAdditionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group_1_0__1__Impl
	rule__Expression6__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getPlusSignKeyword_1_0_1()); }
	'+'
	{ after(grammarAccess.getExpression6Access().getPlusSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getRightAssignment_1_0_2()); }
	(rule__Expression6__RightAssignment_1_0_2)
	{ after(grammarAccess.getExpression6Access().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression6__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group_1_1__0__Impl
	rule__Expression6__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getSubtractionLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getExpression6Access().getSubtractionLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group_1_1__1__Impl
	rule__Expression6__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getHyphenMinusKeyword_1_1_1()); }
	'-'
	{ after(grammarAccess.getExpression6Access().getHyphenMinusKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression6__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression6Access().getRightAssignment_1_1_2()); }
	(rule__Expression6__RightAssignment_1_1_2)
	{ after(grammarAccess.getExpression6Access().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression5__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group__0__Impl
	rule__Expression5__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getExpression4ParserRuleCall_0()); }
	ruleExpression4
	{ after(grammarAccess.getExpression5Access().getExpression4ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getAlternatives_1()); }
	(rule__Expression5__Alternatives_1)*
	{ after(grammarAccess.getExpression5Access().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression5__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_0__0__Impl
	rule__Expression5__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getMultiplicationLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getExpression5Access().getMultiplicationLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_0__1__Impl
	rule__Expression5__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getAsteriskKeyword_1_0_1()); }
	'*'
	{ after(grammarAccess.getExpression5Access().getAsteriskKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getRightAssignment_1_0_2()); }
	(rule__Expression5__RightAssignment_1_0_2)
	{ after(grammarAccess.getExpression5Access().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression5__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_1__0__Impl
	rule__Expression5__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getDivisionLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getExpression5Access().getDivisionLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_1__1__Impl
	rule__Expression5__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getSolidusKeyword_1_1_1()); }
	'/'
	{ after(grammarAccess.getExpression5Access().getSolidusKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getRightAssignment_1_1_2()); }
	(rule__Expression5__RightAssignment_1_1_2)
	{ after(grammarAccess.getExpression5Access().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression5__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_2__0__Impl
	rule__Expression5__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getRemainderLeftAction_1_2_0()); }
	()
	{ after(grammarAccess.getExpression5Access().getRemainderLeftAction_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_2__1__Impl
	rule__Expression5__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getPercentSignKeyword_1_2_1()); }
	'%'
	{ after(grammarAccess.getExpression5Access().getPercentSignKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression5__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression5Access().getRightAssignment_1_2_2()); }
	(rule__Expression5__RightAssignment_1_2_2)
	{ after(grammarAccess.getExpression5Access().getRightAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression4__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression4__Group__0__Impl
	rule__Expression4__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression4Access().getExpression3ParserRuleCall_0()); }
	ruleExpression3
	{ after(grammarAccess.getExpression4Access().getExpression3ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression4__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression4Access().getGroup_1()); }
	(rule__Expression4__Group_1__0)*
	{ after(grammarAccess.getExpression4Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression4__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression4__Group_1__0__Impl
	rule__Expression4__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression4Access().getExponentiationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpression4Access().getExponentiationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression4__Group_1__1__Impl
	rule__Expression4__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression4Access().getAsteriskAsteriskKeyword_1_1()); }
	'**'
	{ after(grammarAccess.getExpression4Access().getAsteriskAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression4__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression4Access().getRightAssignment_1_2()); }
	(rule__Expression4__RightAssignment_1_2)
	{ after(grammarAccess.getExpression4Access().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression3__Group__0__Impl
	rule__Expression3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression3Access().getExpression2ParserRuleCall_0()); }
	ruleExpression2
	{ after(grammarAccess.getExpression3Access().getExpression2ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression3__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression3Access().getGroup_1()); }
	(rule__Expression3__Group_1__0)*
	{ after(grammarAccess.getExpression3Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression3__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression3__Group_1__0__Impl
	rule__Expression3__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression3Access().getConversionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpression3Access().getConversionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression3__Group_1__1__Impl
	rule__Expression3__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression3Access().getAsKeyword_1_1()); }
	'as'
	{ after(grammarAccess.getExpression3Access().getAsKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression3__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression3Access().getRightAssignment_1_2()); }
	(rule__Expression3__RightAssignment_1_2)
	{ after(grammarAccess.getExpression3Access().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression2__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression2__Group_0__0__Impl
	rule__Expression2__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression2Access().getUnaryNegationAction_0_0()); }
	()
	{ after(grammarAccess.getExpression2Access().getUnaryNegationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression2__Group_0__1__Impl
	rule__Expression2__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression2Access().getHyphenMinusKeyword_0_1()); }
	'-'
	{ after(grammarAccess.getExpression2Access().getHyphenMinusKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression2__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression2Access().getInnerAssignment_0_2()); }
	(rule__Expression2__InnerAssignment_0_2)
	{ after(grammarAccess.getExpression2Access().getInnerAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression2__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression2__Group_1__0__Impl
	rule__Expression2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression2Access().getLogicalNotAction_1_0()); }
	()
	{ after(grammarAccess.getExpression2Access().getLogicalNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression2__Group_1__1__Impl
	rule__Expression2__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression2Access().getNotKeyword_1_1()); }
	'not'
	{ after(grammarAccess.getExpression2Access().getNotKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression2__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression2Access().getInnerAssignment_1_2()); }
	(rule__Expression2__InnerAssignment_1_2)
	{ after(grammarAccess.getExpression2Access().getInnerAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression1__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group__0__Impl
	rule__Expression1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getExpression0ParserRuleCall_0()); }
	ruleExpression0
	{ after(grammarAccess.getExpression1Access().getExpression0ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getGroup_1()); }
	(rule__Expression1__Group_1__0)*
	{ after(grammarAccess.getExpression1Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression1__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__0__Impl
	rule__Expression1__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getApplicationExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getExpression1Access().getApplicationExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__1__Impl
	rule__Expression1__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getExpression1Access().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__2__Impl
	rule__Expression1__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getGroup_1_2()); }
	(rule__Expression1__Group_1_2__0)?
	{ after(grammarAccess.getExpression1Access().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getExpression1Access().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression1__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1_2__0__Impl
	rule__Expression1__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getArgumentsAssignment_1_2_0()); }
	(rule__Expression1__ArgumentsAssignment_1_2_0)
	{ after(grammarAccess.getExpression1Access().getArgumentsAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1_2__1__Impl
	rule__Expression1__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getGroup_1_2_1()); }
	(rule__Expression1__Group_1_2_1__0)*
	{ after(grammarAccess.getExpression1Access().getGroup_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getCommaKeyword_1_2_2()); }
	(',')?
	{ after(grammarAccess.getExpression1Access().getCommaKeyword_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression1__Group_1_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1_2_1__0__Impl
	rule__Expression1__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getCommaKeyword_1_2_1_0()); }
	','
	{ after(grammarAccess.getExpression1Access().getCommaKeyword_1_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression1__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__Group_1_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression1Access().getArgumentsAssignment_1_2_1_1()); }
	(rule__Expression1__ArgumentsAssignment_1_2_1_1)
	{ after(grammarAccess.getExpression1Access().getArgumentsAssignment_1_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression0__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression0__Group_3__0__Impl
	rule__Expression0__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression0__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression0Access().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getExpression0Access().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression0__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression0__Group_3__1__Impl
	rule__Expression0__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression0__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression0Access().getExpressionParserRuleCall_3_1()); }
	ruleExpression
	{ after(grammarAccess.getExpression0Access().getExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression0__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression0__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression0__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpression0Access().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getExpression0Access().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VoidLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VoidLiteral__Group__0__Impl
	rule__VoidLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVoidLiteralAccess().getVoidLiteralAction_0()); }
	()
	{ after(grammarAccess.getVoidLiteralAccess().getVoidLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VoidLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVoidLiteralAccess().getVoidKeyword_1()); }
	'void'
	{ after(grammarAccess.getVoidLiteralAccess().getVoidKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAnnotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeAnnotation__Group__0__Impl
	rule__TypeAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAnnotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAnnotationAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getTypeAnnotationAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAnnotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeAnnotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAnnotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAnnotationAccess().getTypeParserRuleCall_1()); }
	ruleType
	{ after(grammarAccess.getTypeAnnotationAccess().getTypeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0__0__Impl
	rule__FunctionType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getFunctionTypeAction_0_0()); }
	()
	{ after(grammarAccess.getFunctionTypeAccess().getFunctionTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0__1__Impl
	rule__FunctionType__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0_1()); }
	'Function'
	{ after(grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0__2__Impl
	rule__FunctionType__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getLeftParenthesisKeyword_0_2()); }
	'('
	{ after(grammarAccess.getFunctionTypeAccess().getLeftParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0__3__Impl
	rule__FunctionType__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getGroup_0_3()); }
	(rule__FunctionType__Group_0_3__0)?
	{ after(grammarAccess.getFunctionTypeAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0__4__Impl
	rule__FunctionType__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getFunctionTypeAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getReturnTypeAssignment_0_5()); }
	(rule__FunctionType__ReturnTypeAssignment_0_5)?
	{ after(grammarAccess.getFunctionTypeAccess().getReturnTypeAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionType__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0_3__0__Impl
	rule__FunctionType__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getParamTypesAssignment_0_3_0()); }
	(rule__FunctionType__ParamTypesAssignment_0_3_0)
	{ after(grammarAccess.getFunctionTypeAccess().getParamTypesAssignment_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0_3__1__Impl
	rule__FunctionType__Group_0_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getGroup_0_3_1()); }
	(rule__FunctionType__Group_0_3_1__0)*
	{ after(grammarAccess.getFunctionTypeAccess().getGroup_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_2()); }
	(',')?
	{ after(grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionType__Group_0_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0_3_1__0__Impl
	rule__FunctionType__Group_0_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_1_0()); }
	','
	{ after(grammarAccess.getFunctionTypeAccess().getCommaKeyword_0_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group_0_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group_0_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getParamTypesAssignment_0_3_1_1()); }
	(rule__FunctionType__ParamTypesAssignment_0_3_1_1)
	{ after(grammarAccess.getFunctionTypeAccess().getParamTypesAssignment_0_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EitherType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EitherType__Group__0__Impl
	rule__EitherType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEitherTypeAccess().getPrimaryTypeParserRuleCall_0()); }
	rulePrimaryType
	{ after(grammarAccess.getEitherTypeAccess().getPrimaryTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EitherType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEitherTypeAccess().getGroup_1()); }
	(rule__EitherType__Group_1__0)*
	{ after(grammarAccess.getEitherTypeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EitherType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EitherType__Group_1__0__Impl
	rule__EitherType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEitherTypeAccess().getEitherTypeLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEitherTypeAccess().getEitherTypeLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EitherType__Group_1__1__Impl
	rule__EitherType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEitherTypeAccess().getQuestionMarkKeyword_1_1()); }
	'?'
	{ after(grammarAccess.getEitherTypeAccess().getQuestionMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EitherType__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEitherTypeAccess().getRightAssignment_1_2()); }
	(rule__EitherType__RightAssignment_1_2)
	{ after(grammarAccess.getEitherTypeAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryType__Group_1__0__Impl
	rule__PrimaryType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryType__Group_1__1__Impl
	rule__PrimaryType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryTypeAccess().getTypeParserRuleCall_1_1()); }
	ruleType
	{ after(grammarAccess.getPrimaryTypeAccess().getTypeParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryType__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryTypeAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryTypeAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveType__Group__0__Impl
	rule__PrimitiveType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypeAction_0()); }
	()
	{ after(grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveTypeAccess().getTypeAssignment_1()); }
	(rule__PrimitiveType__TypeAssignment_1)
	{ after(grammarAccess.getPrimitiveTypeAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LetBinding__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__0__Impl
	rule__LetBinding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getLetBindingAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__1__Impl
	rule__LetBinding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getMutableAssignment_1()); }
	(rule__LetBinding__MutableAssignment_1)?
	{ after(grammarAccess.getLetBindingAccess().getMutableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__2__Impl
	rule__LetBinding__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getBindingAssignment_2()); }
	(rule__LetBinding__BindingAssignment_2)
	{ after(grammarAccess.getLetBindingAccess().getBindingAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__3__Impl
	rule__LetBinding__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getTypeAssignment_3()); }
	(rule__LetBinding__TypeAssignment_3)?
	{ after(grammarAccess.getLetBindingAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__4__Impl
	rule__LetBinding__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getLetBindingAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetBinding__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetBindingAccess().getExpressionAssignment_5()); }
	(rule__LetBinding__ExpressionAssignment_5)
	{ after(grammarAccess.getLetBindingAccess().getExpressionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getBindingAssignment_0()); }
	(rule__Assignment__BindingAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getBindingAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
	(rule__Assignment__ExpressionAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputAction_0()); }
	()
	{ after(grammarAccess.getInputAccess().getInputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputKeyword_1()); }
	'input'
	{ after(grammarAccess.getInputAccess().getInputKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getExpressionAssignment_1()); }
	(rule__Print__ExpressionAssignment_1)
	{ after(grammarAccess.getPrintAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAlternatives_1()); }
	(rule__If__Alternatives_1)
	{ after(grammarAccess.getIfAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfLet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__0__Impl
	rule__IfLet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getIfLetAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__1__Impl
	rule__IfLet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getMutableAssignment_1()); }
	(rule__IfLet__MutableAssignment_1)?
	{ after(grammarAccess.getIfLetAccess().getMutableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__2__Impl
	rule__IfLet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getBindingAssignment_2()); }
	(rule__IfLet__BindingAssignment_2)
	{ after(grammarAccess.getIfLetAccess().getBindingAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__3__Impl
	rule__IfLet__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getTypeAssignment_3()); }
	(rule__IfLet__TypeAssignment_3)?
	{ after(grammarAccess.getIfLetAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__4__Impl
	rule__IfLet__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getIfLetAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__5__Impl
	rule__IfLet__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getExpressionAssignment_5()); }
	(rule__IfLet__ExpressionAssignment_5)
	{ after(grammarAccess.getIfLetAccess().getExpressionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__6__Impl
	rule__IfLet__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getIfBlockAssignment_6()); }
	(rule__IfLet__IfBlockAssignment_6)
	{ after(grammarAccess.getIfLetAccess().getIfBlockAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getGroup_7()); }
	(rule__IfLet__Group_7__0)?
	{ after(grammarAccess.getIfLetAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfLet__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group_7__0__Impl
	rule__IfLet__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getElseKeyword_7_0()); }
	'else'
	{ after(grammarAccess.getIfLetAccess().getElseKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfLet__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfLetAccess().getElseLetAssignment_7_1()); }
	(rule__IfLet__ElseLetAssignment_7_1)
	{ after(grammarAccess.getIfLetAccess().getElseLetAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseLet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__0__Impl
	rule__ElseLet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getGroup_0()); }
	(rule__ElseLet__Group_0__0)?
	{ after(grammarAccess.getElseLetAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getElseBlockAssignment_1()); }
	(rule__ElseLet__ElseBlockAssignment_1)
	{ after(grammarAccess.getElseLetAccess().getElseBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseLet__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group_0__0__Impl
	rule__ElseLet__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getLetKeyword_0_0()); }
	'let'
	{ after(grammarAccess.getElseLetAccess().getLetKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group_0__1__Impl
	rule__ElseLet__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getMutableAssignment_0_1()); }
	(rule__ElseLet__MutableAssignment_0_1)?
	{ after(grammarAccess.getElseLetAccess().getMutableAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group_0__2__Impl
	rule__ElseLet__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getBindingAssignment_0_2()); }
	(rule__ElseLet__BindingAssignment_0_2)
	{ after(grammarAccess.getElseLetAccess().getBindingAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getTypeAssignment_0_3()); }
	(rule__ElseLet__TypeAssignment_0_3)?
	{ after(grammarAccess.getElseLetAccess().getTypeAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group__0__Impl
	rule__IfConditions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getConditionsAssignment_0()); }
	(rule__IfConditions__ConditionsAssignment_0)
	{ after(grammarAccess.getIfConditionsAccess().getConditionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group__1__Impl
	rule__IfConditions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getIfBlocksAssignment_1()); }
	(rule__IfConditions__IfBlocksAssignment_1)
	{ after(grammarAccess.getIfConditionsAccess().getIfBlocksAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group__2__Impl
	rule__IfConditions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getGroup_2()); }
	(rule__IfConditions__Group_2__0)*
	{ after(grammarAccess.getIfConditionsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getGroup_3()); }
	(rule__IfConditions__Group_3__0)?
	{ after(grammarAccess.getIfConditionsAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditions__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group_2__0__Impl
	rule__IfConditions__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getElseifKeyword_2_0()); }
	'elseif'
	{ after(grammarAccess.getIfConditionsAccess().getElseifKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group_2__1__Impl
	rule__IfConditions__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getConditionsAssignment_2_1()); }
	(rule__IfConditions__ConditionsAssignment_2_1)
	{ after(grammarAccess.getIfConditionsAccess().getConditionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getIfBlocksAssignment_2_2()); }
	(rule__IfConditions__IfBlocksAssignment_2_2)
	{ after(grammarAccess.getIfConditionsAccess().getIfBlocksAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditions__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group_3__0__Impl
	rule__IfConditions__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getElseKeyword_3_0()); }
	'else'
	{ after(grammarAccess.getIfConditionsAccess().getElseKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfConditions__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionsAccess().getElseBlockAssignment_3_1()); }
	(rule__IfConditions__ElseBlockAssignment_3_1)
	{ after(grammarAccess.getIfConditionsAccess().getElseBlockAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getConditionAssignment_1()); }
	(rule__While__ConditionAssignment_1)
	{ after(grammarAccess.getWhileAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getBlockAssignment_2()); }
	(rule__While__BlockAssignment_2)
	{ after(grammarAccess.getWhileAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Break__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Break__Group__0__Impl
	rule__Break__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Break__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakAccess().getBreakAction_0()); }
	()
	{ after(grammarAccess.getBreakAccess().getBreakAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Break__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Break__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Break__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakAccess().getBreakKeyword_1()); }
	'break'
	{ after(grammarAccess.getBreakAccess().getBreakKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBindingAssignment_1()); }
	(rule__Function__BindingAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getBindingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
	(rule__Function__Group_3__0)?
	{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_5()); }
	(rule__Function__ReturnTypeAssignment_5)?
	{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBodyAssignment_6()); }
	(rule__Function__BodyAssignment_6)
	{ after(grammarAccess.getFunctionAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3_0()); }
	(rule__Function__ParametersAssignment_3_0)
	{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3__1__Impl
	rule__Function__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_3_1()); }
	(rule__Function__Group_3_1__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_2()); }
	(',')?
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3_1__0__Impl
	rule__Function__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3_1_1()); }
	(rule__Function__ParametersAssignment_3_1_1)
	{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
	()
	{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getMutableAssignment_1()); }
	(rule__Parameter__MutableAssignment_1)?
	{ after(grammarAccess.getParameterAccess().getMutableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getBindingAssignment_2()); }
	(rule__Parameter__BindingAssignment_2)
	{ after(grammarAccess.getParameterAccess().getBindingAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_3()); }
	(rule__Parameter__TypeAssignment_3)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnAction_0()); }
	()
	{ after(grammarAccess.getReturnAccess().getReturnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__1__Impl
	rule__Return__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnKeyword_1()); }
	'return'
	{ after(grammarAccess.getReturnAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getExpressionAssignment_2()); }
	(rule__Return__ExpressionAssignment_2)?
	{ after(grammarAccess.getReturnAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Throw__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Throw__Group__0__Impl
	rule__Throw__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Throw__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThrowAccess().getThrowAction_0()); }
	()
	{ after(grammarAccess.getThrowAccess().getThrowAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Throw__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Throw__Group__1__Impl
	rule__Throw__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Throw__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThrowAccess().getThrowKeyword_1()); }
	'throw'
	{ after(grammarAccess.getThrowAccess().getThrowKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Throw__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Throw__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Throw__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThrowAccess().getExpressionAssignment_2()); }
	(rule__Throw__ExpressionAssignment_2)?
	{ after(grammarAccess.getThrowAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hale__MainBlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHaleAccess().getMainBlockBlockParserRuleCall_1_0()); }
		ruleBlock
		{ after(grammarAccess.getHaleAccess().getMainBlockBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression10__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression10Access().getRightExpression9ParserRuleCall_1_2_0()); }
		ruleExpression9
		{ after(grammarAccess.getExpression10Access().getRightExpression9ParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression9Access().getRightExpression8ParserRuleCall_1_0_2_0()); }
		ruleExpression8
		{ after(grammarAccess.getExpression9Access().getRightExpression8ParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression9__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression9Access().getRightExpression8ParserRuleCall_1_1_2_0()); }
		ruleExpression8
		{ after(grammarAccess.getExpression9Access().getRightExpression8ParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression8Access().getRightExpression7ParserRuleCall_1_0_2_0()); }
		ruleExpression7
		{ after(grammarAccess.getExpression8Access().getRightExpression7ParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression8__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression8Access().getRightExpression7ParserRuleCall_1_1_2_0()); }
		ruleExpression7
		{ after(grammarAccess.getExpression8Access().getRightExpression7ParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_0_2_0()); }
		ruleExpression6
		{ after(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_1_2_0()); }
		ruleExpression6
		{ after(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__RightAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_2_2_0()); }
		ruleExpression6
		{ after(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression7__RightAssignment_1_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_3_2_0()); }
		ruleExpression6
		{ after(grammarAccess.getExpression7Access().getRightExpression6ParserRuleCall_1_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression6Access().getRightExpression5ParserRuleCall_1_0_2_0()); }
		ruleExpression5
		{ after(grammarAccess.getExpression6Access().getRightExpression5ParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression6__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression6Access().getRightExpression5ParserRuleCall_1_1_2_0()); }
		ruleExpression5
		{ after(grammarAccess.getExpression6Access().getRightExpression5ParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_0_2_0()); }
		ruleExpression4
		{ after(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_1_2_0()); }
		ruleExpression4
		{ after(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression5__RightAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_2_2_0()); }
		ruleExpression4
		{ after(grammarAccess.getExpression5Access().getRightExpression4ParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression4__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression4Access().getRightExpression3ParserRuleCall_1_2_0()); }
		ruleExpression3
		{ after(grammarAccess.getExpression4Access().getRightExpression3ParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression3__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression3Access().getRightTypeParserRuleCall_1_2_0()); }
		ruleType
		{ after(grammarAccess.getExpression3Access().getRightTypeParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__InnerAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression2Access().getInnerExpression2ParserRuleCall_0_2_0()); }
		ruleExpression2
		{ after(grammarAccess.getExpression2Access().getInnerExpression2ParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression2__InnerAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression2Access().getInnerExpression2ParserRuleCall_1_2_0()); }
		ruleExpression2
		{ after(grammarAccess.getExpression2Access().getInnerExpression2ParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__ArgumentsAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression1Access().getArgumentsExpressionParserRuleCall_1_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getExpression1Access().getArgumentsExpressionParserRuleCall_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression1__ArgumentsAssignment_1_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpression1Access().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpression1Access().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueDOUBLETerminalRuleCall_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getNumberLiteralAccess().getValueDOUBLETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__ParamTypesAssignment_0_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getParamTypesTypeParserRuleCall_0_3_0_0()); }
		ruleType
		{ after(grammarAccess.getFunctionTypeAccess().getParamTypesTypeParserRuleCall_0_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__ParamTypesAssignment_0_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getParamTypesTypeParserRuleCall_0_3_1_1_0()); }
		ruleType
		{ after(grammarAccess.getFunctionTypeAccess().getParamTypesTypeParserRuleCall_0_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__ReturnTypeAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getReturnTypeTypeAnnotationParserRuleCall_0_5_0()); }
		ruleTypeAnnotation
		{ after(grammarAccess.getFunctionTypeAccess().getReturnTypeTypeAnnotationParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EitherType__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEitherTypeAccess().getRightPrimaryTypeParserRuleCall_1_2_0()); }
		rulePrimaryType
		{ after(grammarAccess.getEitherTypeAccess().getRightPrimaryTypeParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getTypePRIMITIVE_TYPETerminalRuleCall_1_0()); }
		RULE_PRIMITIVE_TYPE
		{ after(grammarAccess.getPrimitiveTypeAccess().getTypePRIMITIVE_TYPETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBindingAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getBindingAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__MutableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getMutableMutKeyword_1_0()); }
		(
			{ before(grammarAccess.getLetBindingAccess().getMutableMutKeyword_1_0()); }
			'mut'
			{ after(grammarAccess.getLetBindingAccess().getMutableMutKeyword_1_0()); }
		)
		{ after(grammarAccess.getLetBindingAccess().getMutableMutKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__BindingAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getBindingBindingParserRuleCall_2_0()); }
		ruleBinding
		{ after(grammarAccess.getLetBindingAccess().getBindingBindingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getTypeTypeAnnotationParserRuleCall_3_0()); }
		ruleTypeAnnotation
		{ after(grammarAccess.getLetBindingAccess().getTypeTypeAnnotationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetBinding__ExpressionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetBindingAccess().getExpressionExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getLetBindingAccess().getExpressionExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BindingReference__BindingAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBindingReferenceAccess().getBindingBindingCrossReference_0()); }
		(
			{ before(grammarAccess.getBindingReferenceAccess().getBindingBindingIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getBindingReferenceAccess().getBindingBindingIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getBindingReferenceAccess().getBindingBindingCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__BindingAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getBindingBindingCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getBindingBindingIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getBindingBindingIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getBindingBindingCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__MutableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfLetAccess().getMutableMutKeyword_1_0()); }
		(
			{ before(grammarAccess.getIfLetAccess().getMutableMutKeyword_1_0()); }
			'mut'
			{ after(grammarAccess.getIfLetAccess().getMutableMutKeyword_1_0()); }
		)
		{ after(grammarAccess.getIfLetAccess().getMutableMutKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__BindingAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfLetAccess().getBindingBindingParserRuleCall_2_0()); }
		ruleBinding
		{ after(grammarAccess.getIfLetAccess().getBindingBindingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfLetAccess().getTypeTypeAnnotationParserRuleCall_3_0()); }
		ruleTypeAnnotation
		{ after(grammarAccess.getIfLetAccess().getTypeTypeAnnotationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__ExpressionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfLetAccess().getExpressionExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getIfLetAccess().getExpressionExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__IfBlockAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfLetAccess().getIfBlockBracedBlockParserRuleCall_6_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getIfLetAccess().getIfBlockBracedBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfLet__ElseLetAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfLetAccess().getElseLetElseLetParserRuleCall_7_1_0()); }
		ruleElseLet
		{ after(grammarAccess.getIfLetAccess().getElseLetElseLetParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__MutableAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getMutableMutKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getElseLetAccess().getMutableMutKeyword_0_1_0()); }
			'mut'
			{ after(grammarAccess.getElseLetAccess().getMutableMutKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getElseLetAccess().getMutableMutKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__BindingAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getBindingBindingParserRuleCall_0_2_0()); }
		ruleBinding
		{ after(grammarAccess.getElseLetAccess().getBindingBindingParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__TypeAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getTypeTypeAnnotationParserRuleCall_0_3_0()); }
		ruleTypeAnnotation
		{ after(grammarAccess.getElseLetAccess().getTypeTypeAnnotationParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__ElseBlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getElseBlockBracedBlockParserRuleCall_1_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getElseLetAccess().getElseBlockBracedBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__ConditionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionsAccess().getConditionsExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getIfConditionsAccess().getConditionsExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__IfBlocksAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionsAccess().getIfBlocksBracedBlockParserRuleCall_1_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getIfConditionsAccess().getIfBlocksBracedBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__ConditionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionsAccess().getConditionsExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfConditionsAccess().getConditionsExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__IfBlocksAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionsAccess().getIfBlocksBracedBlockParserRuleCall_2_2_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getIfConditionsAccess().getIfBlocksBracedBlockParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditions__ElseBlockAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionsAccess().getElseBlockBracedBlockParserRuleCall_3_1_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getIfConditionsAccess().getElseBlockBracedBlockParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getBlockBracedBlockParserRuleCall_2_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getWhileAccess().getBlockBracedBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BindingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getBindingBindingParserRuleCall_1_0()); }
		ruleBinding
		{ after(grammarAccess.getFunctionAccess().getBindingBindingParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_0_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getReturnTypeTypeAnnotationParserRuleCall_5_0()); }
		ruleTypeAnnotation
		{ after(grammarAccess.getFunctionAccess().getReturnTypeTypeAnnotationParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getBodyBracedBlockParserRuleCall_6_0()); }
		ruleBracedBlock
		{ after(grammarAccess.getFunctionAccess().getBodyBracedBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__MutableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getMutableMutKeyword_1_0()); }
		(
			{ before(grammarAccess.getParameterAccess().getMutableMutKeyword_1_0()); }
			'mut'
			{ after(grammarAccess.getParameterAccess().getMutableMutKeyword_1_0()); }
		)
		{ after(grammarAccess.getParameterAccess().getMutableMutKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__BindingAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getBindingBindingParserRuleCall_2_0()); }
		ruleBinding
		{ after(grammarAccess.getParameterAccess().getBindingBindingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeTypeAnnotationParserRuleCall_3_0()); }
		ruleTypeAnnotation
		{ after(grammarAccess.getParameterAccess().getTypeTypeAnnotationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Throw__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThrowAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getThrowAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_PRIMITIVE_TYPE : ('Void'|'Boolean'|'Number'|'String');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_DOUBLE : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
