/*
 * generated by Xtext 2.34.0
 */
package willburden.hale.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import willburden.hale.ide.contentassist.antlr.internal.InternalHaleParser;
import willburden.hale.services.HaleGrammarAccess;

public class HaleParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HaleGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HaleGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_1(), "rule__Expression__Alternatives_1");
			builder.put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getHaleAccess().getGroup(), "rule__Hale__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_1(), "rule__Expression__Group_1_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_2(), "rule__Expression__Group_1_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_3(), "rule__Expression__Group_1_3__0");
			builder.put(grammarAccess.getTerminalExpressionAccess().getGroup_0(), "rule__TerminalExpression__Group_0__0");
			builder.put(grammarAccess.getHaleAccess().getStatementsAssignment_1(), "rule__Hale__StatementsAssignment_1");
			builder.put(grammarAccess.getPrintAccess().getValueAssignment_1(), "rule__Print__ValueAssignment_1");
			builder.put(grammarAccess.getBindingAccess().getMutableAssignment_1(), "rule__Binding__MutableAssignment_1");
			builder.put(grammarAccess.getBindingAccess().getNameAssignment_2(), "rule__Binding__NameAssignment_2");
			builder.put(grammarAccess.getBindingAccess().getValueAssignment_4(), "rule__Binding__ValueAssignment_4");
			builder.put(grammarAccess.getBindingReferenceAccess().getBindingAssignment(), "rule__BindingReference__BindingAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getBindingAssignment_0(), "rule__Assignment__BindingAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_0_2(), "rule__Expression__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_1_2(), "rule__Expression__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2_2(), "rule__Expression__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_3_2(), "rule__Expression__RightAssignment_1_3_2");
			builder.put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HaleGrammarAccess grammarAccess;

	@Override
	protected InternalHaleParser createParser() {
		InternalHaleParser result = new InternalHaleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HaleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HaleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
