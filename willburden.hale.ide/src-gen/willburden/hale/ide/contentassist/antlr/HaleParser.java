/*
 * generated by Xtext 2.34.0
 */
package willburden.hale.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import willburden.hale.ide.contentassist.antlr.internal.InternalHaleParser;
import willburden.hale.services.HaleGrammarAccess;

public class HaleParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HaleGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HaleGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockAccess().getAlternatives_1(), "rule__Block__Alternatives_1");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives_4_0(), "rule__Statement__Alternatives_4_0");
			builder.put(grammarAccess.getExpression9Access().getAlternatives_1(), "rule__Expression9__Alternatives_1");
			builder.put(grammarAccess.getExpression8Access().getAlternatives_1(), "rule__Expression8__Alternatives_1");
			builder.put(grammarAccess.getExpression7Access().getAlternatives_1(), "rule__Expression7__Alternatives_1");
			builder.put(grammarAccess.getExpression6Access().getAlternatives_1(), "rule__Expression6__Alternatives_1");
			builder.put(grammarAccess.getExpression5Access().getAlternatives_1(), "rule__Expression5__Alternatives_1");
			builder.put(grammarAccess.getExpression2Access().getAlternatives(), "rule__Expression2__Alternatives");
			builder.put(grammarAccess.getExpression0Access().getAlternatives(), "rule__Expression0__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getFunctionTypeAccess().getAlternatives(), "rule__FunctionType__Alternatives");
			builder.put(grammarAccess.getPrimaryTypeAccess().getAlternatives(), "rule__PrimaryType__Alternatives");
			builder.put(grammarAccess.getIfAccess().getAlternatives_1(), "rule__If__Alternatives_1");
			builder.put(grammarAccess.getHaleAccess().getGroup(), "rule__Hale__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
			builder.put(grammarAccess.getBracedBlockAccess().getGroup(), "rule__BracedBlock__Group__0");
			builder.put(grammarAccess.getExpression10Access().getGroup(), "rule__Expression10__Group__0");
			builder.put(grammarAccess.getExpression10Access().getGroup_1(), "rule__Expression10__Group_1__0");
			builder.put(grammarAccess.getExpression9Access().getGroup(), "rule__Expression9__Group__0");
			builder.put(grammarAccess.getExpression9Access().getGroup_1_0(), "rule__Expression9__Group_1_0__0");
			builder.put(grammarAccess.getExpression9Access().getGroup_1_1(), "rule__Expression9__Group_1_1__0");
			builder.put(grammarAccess.getExpression8Access().getGroup(), "rule__Expression8__Group__0");
			builder.put(grammarAccess.getExpression8Access().getGroup_1_0(), "rule__Expression8__Group_1_0__0");
			builder.put(grammarAccess.getExpression8Access().getGroup_1_1(), "rule__Expression8__Group_1_1__0");
			builder.put(grammarAccess.getExpression7Access().getGroup(), "rule__Expression7__Group__0");
			builder.put(grammarAccess.getExpression7Access().getGroup_1_0(), "rule__Expression7__Group_1_0__0");
			builder.put(grammarAccess.getExpression7Access().getGroup_1_1(), "rule__Expression7__Group_1_1__0");
			builder.put(grammarAccess.getExpression7Access().getGroup_1_2(), "rule__Expression7__Group_1_2__0");
			builder.put(grammarAccess.getExpression7Access().getGroup_1_3(), "rule__Expression7__Group_1_3__0");
			builder.put(grammarAccess.getExpression6Access().getGroup(), "rule__Expression6__Group__0");
			builder.put(grammarAccess.getExpression6Access().getGroup_1_0(), "rule__Expression6__Group_1_0__0");
			builder.put(grammarAccess.getExpression6Access().getGroup_1_1(), "rule__Expression6__Group_1_1__0");
			builder.put(grammarAccess.getExpression5Access().getGroup(), "rule__Expression5__Group__0");
			builder.put(grammarAccess.getExpression5Access().getGroup_1_0(), "rule__Expression5__Group_1_0__0");
			builder.put(grammarAccess.getExpression5Access().getGroup_1_1(), "rule__Expression5__Group_1_1__0");
			builder.put(grammarAccess.getExpression5Access().getGroup_1_2(), "rule__Expression5__Group_1_2__0");
			builder.put(grammarAccess.getExpression4Access().getGroup(), "rule__Expression4__Group__0");
			builder.put(grammarAccess.getExpression4Access().getGroup_1(), "rule__Expression4__Group_1__0");
			builder.put(grammarAccess.getExpression3Access().getGroup(), "rule__Expression3__Group__0");
			builder.put(grammarAccess.getExpression3Access().getGroup_1(), "rule__Expression3__Group_1__0");
			builder.put(grammarAccess.getExpression2Access().getGroup_0(), "rule__Expression2__Group_0__0");
			builder.put(grammarAccess.getExpression2Access().getGroup_1(), "rule__Expression2__Group_1__0");
			builder.put(grammarAccess.getExpression1Access().getGroup(), "rule__Expression1__Group__0");
			builder.put(grammarAccess.getExpression1Access().getGroup_1(), "rule__Expression1__Group_1__0");
			builder.put(grammarAccess.getExpression1Access().getGroup_1_2(), "rule__Expression1__Group_1_2__0");
			builder.put(grammarAccess.getExpression1Access().getGroup_1_2_1(), "rule__Expression1__Group_1_2_1__0");
			builder.put(grammarAccess.getExpression0Access().getGroup_3(), "rule__Expression0__Group_3__0");
			builder.put(grammarAccess.getVoidLiteralAccess().getGroup(), "rule__VoidLiteral__Group__0");
			builder.put(grammarAccess.getTypeAnnotationAccess().getGroup(), "rule__TypeAnnotation__Group__0");
			builder.put(grammarAccess.getFunctionTypeAccess().getGroup_0(), "rule__FunctionType__Group_0__0");
			builder.put(grammarAccess.getFunctionTypeAccess().getGroup_0_3(), "rule__FunctionType__Group_0_3__0");
			builder.put(grammarAccess.getFunctionTypeAccess().getGroup_0_3_1(), "rule__FunctionType__Group_0_3_1__0");
			builder.put(grammarAccess.getEitherTypeAccess().getGroup(), "rule__EitherType__Group__0");
			builder.put(grammarAccess.getEitherTypeAccess().getGroup_1(), "rule__EitherType__Group_1__0");
			builder.put(grammarAccess.getPrimaryTypeAccess().getGroup_1(), "rule__PrimaryType__Group_1__0");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getGroup(), "rule__PrimitiveType__Group__0");
			builder.put(grammarAccess.getLetBindingAccess().getGroup(), "rule__LetBinding__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfLetAccess().getGroup(), "rule__IfLet__Group__0");
			builder.put(grammarAccess.getIfLetAccess().getGroup_7(), "rule__IfLet__Group_7__0");
			builder.put(grammarAccess.getElseLetAccess().getGroup(), "rule__ElseLet__Group__0");
			builder.put(grammarAccess.getElseLetAccess().getGroup_0(), "rule__ElseLet__Group_0__0");
			builder.put(grammarAccess.getIfConditionsAccess().getGroup(), "rule__IfConditions__Group__0");
			builder.put(grammarAccess.getIfConditionsAccess().getGroup_2(), "rule__IfConditions__Group_2__0");
			builder.put(grammarAccess.getIfConditionsAccess().getGroup_3(), "rule__IfConditions__Group_3__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getBreakAccess().getGroup(), "rule__Break__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_3(), "rule__Function__Group_3__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_3_1(), "rule__Function__Group_3_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getThrowAccess().getGroup(), "rule__Throw__Group__0");
			builder.put(grammarAccess.getHaleAccess().getMainBlockAssignment_1(), "rule__Hale__MainBlockAssignment_1");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment_1_0(), "rule__Block__StatementsAssignment_1_0");
			builder.put(grammarAccess.getExpression10Access().getRightAssignment_1_2(), "rule__Expression10__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression9Access().getRightAssignment_1_0_2(), "rule__Expression9__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpression9Access().getRightAssignment_1_1_2(), "rule__Expression9__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpression8Access().getRightAssignment_1_0_2(), "rule__Expression8__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpression8Access().getRightAssignment_1_1_2(), "rule__Expression8__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpression7Access().getRightAssignment_1_0_2(), "rule__Expression7__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpression7Access().getRightAssignment_1_1_2(), "rule__Expression7__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpression7Access().getRightAssignment_1_2_2(), "rule__Expression7__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpression7Access().getRightAssignment_1_3_2(), "rule__Expression7__RightAssignment_1_3_2");
			builder.put(grammarAccess.getExpression6Access().getRightAssignment_1_0_2(), "rule__Expression6__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpression6Access().getRightAssignment_1_1_2(), "rule__Expression6__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpression5Access().getRightAssignment_1_0_2(), "rule__Expression5__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpression5Access().getRightAssignment_1_1_2(), "rule__Expression5__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpression5Access().getRightAssignment_1_2_2(), "rule__Expression5__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpression4Access().getRightAssignment_1_2(), "rule__Expression4__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression3Access().getRightAssignment_1_2(), "rule__Expression3__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression2Access().getInnerAssignment_0_2(), "rule__Expression2__InnerAssignment_0_2");
			builder.put(grammarAccess.getExpression2Access().getInnerAssignment_1_2(), "rule__Expression2__InnerAssignment_1_2");
			builder.put(grammarAccess.getExpression1Access().getArgumentsAssignment_1_2_0(), "rule__Expression1__ArgumentsAssignment_1_2_0");
			builder.put(grammarAccess.getExpression1Access().getArgumentsAssignment_1_2_1_1(), "rule__Expression1__ArgumentsAssignment_1_2_1_1");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getFunctionTypeAccess().getParamTypesAssignment_0_3_0(), "rule__FunctionType__ParamTypesAssignment_0_3_0");
			builder.put(grammarAccess.getFunctionTypeAccess().getParamTypesAssignment_0_3_1_1(), "rule__FunctionType__ParamTypesAssignment_0_3_1_1");
			builder.put(grammarAccess.getFunctionTypeAccess().getReturnTypeAssignment_0_5(), "rule__FunctionType__ReturnTypeAssignment_0_5");
			builder.put(grammarAccess.getEitherTypeAccess().getRightAssignment_1_2(), "rule__EitherType__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getTypeAssignment_1(), "rule__PrimitiveType__TypeAssignment_1");
			builder.put(grammarAccess.getBindingAccess().getNameAssignment(), "rule__Binding__NameAssignment");
			builder.put(grammarAccess.getLetBindingAccess().getMutableAssignment_1(), "rule__LetBinding__MutableAssignment_1");
			builder.put(grammarAccess.getLetBindingAccess().getBindingAssignment_2(), "rule__LetBinding__BindingAssignment_2");
			builder.put(grammarAccess.getLetBindingAccess().getTypeAssignment_3(), "rule__LetBinding__TypeAssignment_3");
			builder.put(grammarAccess.getLetBindingAccess().getExpressionAssignment_5(), "rule__LetBinding__ExpressionAssignment_5");
			builder.put(grammarAccess.getBindingReferenceAccess().getBindingAssignment(), "rule__BindingReference__BindingAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getBindingAssignment_0(), "rule__Assignment__BindingAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
			builder.put(grammarAccess.getPrintAccess().getExpressionAssignment_1(), "rule__Print__ExpressionAssignment_1");
			builder.put(grammarAccess.getIfLetAccess().getMutableAssignment_1(), "rule__IfLet__MutableAssignment_1");
			builder.put(grammarAccess.getIfLetAccess().getBindingAssignment_2(), "rule__IfLet__BindingAssignment_2");
			builder.put(grammarAccess.getIfLetAccess().getTypeAssignment_3(), "rule__IfLet__TypeAssignment_3");
			builder.put(grammarAccess.getIfLetAccess().getExpressionAssignment_5(), "rule__IfLet__ExpressionAssignment_5");
			builder.put(grammarAccess.getIfLetAccess().getIfBlockAssignment_6(), "rule__IfLet__IfBlockAssignment_6");
			builder.put(grammarAccess.getIfLetAccess().getElseLetAssignment_7_1(), "rule__IfLet__ElseLetAssignment_7_1");
			builder.put(grammarAccess.getElseLetAccess().getMutableAssignment_0_1(), "rule__ElseLet__MutableAssignment_0_1");
			builder.put(grammarAccess.getElseLetAccess().getBindingAssignment_0_2(), "rule__ElseLet__BindingAssignment_0_2");
			builder.put(grammarAccess.getElseLetAccess().getTypeAssignment_0_3(), "rule__ElseLet__TypeAssignment_0_3");
			builder.put(grammarAccess.getElseLetAccess().getElseBlockAssignment_1(), "rule__ElseLet__ElseBlockAssignment_1");
			builder.put(grammarAccess.getIfConditionsAccess().getConditionsAssignment_0(), "rule__IfConditions__ConditionsAssignment_0");
			builder.put(grammarAccess.getIfConditionsAccess().getIfBlocksAssignment_1(), "rule__IfConditions__IfBlocksAssignment_1");
			builder.put(grammarAccess.getIfConditionsAccess().getConditionsAssignment_2_1(), "rule__IfConditions__ConditionsAssignment_2_1");
			builder.put(grammarAccess.getIfConditionsAccess().getIfBlocksAssignment_2_2(), "rule__IfConditions__IfBlocksAssignment_2_2");
			builder.put(grammarAccess.getIfConditionsAccess().getElseBlockAssignment_3_1(), "rule__IfConditions__ElseBlockAssignment_3_1");
			builder.put(grammarAccess.getWhileAccess().getConditionAssignment_1(), "rule__While__ConditionAssignment_1");
			builder.put(grammarAccess.getWhileAccess().getBlockAssignment_2(), "rule__While__BlockAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getBindingAssignment_1(), "rule__Function__BindingAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_3_0(), "rule__Function__ParametersAssignment_3_0");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_3_1_1(), "rule__Function__ParametersAssignment_3_1_1");
			builder.put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_5(), "rule__Function__ReturnTypeAssignment_5");
			builder.put(grammarAccess.getFunctionAccess().getBodyAssignment_6(), "rule__Function__BodyAssignment_6");
			builder.put(grammarAccess.getParameterAccess().getMutableAssignment_1(), "rule__Parameter__MutableAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getBindingAssignment_2(), "rule__Parameter__BindingAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_3(), "rule__Parameter__TypeAssignment_3");
			builder.put(grammarAccess.getReturnAccess().getExpressionAssignment_2(), "rule__Return__ExpressionAssignment_2");
			builder.put(grammarAccess.getThrowAccess().getExpressionAssignment_2(), "rule__Throw__ExpressionAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HaleGrammarAccess grammarAccess;

	@Override
	protected InternalHaleParser createParser() {
		InternalHaleParser result = new InternalHaleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HaleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HaleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
